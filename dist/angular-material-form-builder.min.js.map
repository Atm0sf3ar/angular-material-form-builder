{"version":3,"sources":["webpack://angular-material-form-builder/webpack/universalModuleDefinition","webpack://angular-material-form-builder/./src/lib/directives/upload-item/upload-item.controller.js","webpack://angular-material-form-builder/./src/lib/directives/upload-item/upload-view.controller.js","webpack://angular-material-form-builder/./src/lib/directives/upload-item/upload-view.directive.js","webpack://angular-material-form-builder/./src/lib/directives/upload-item/upload-view.tpl.html","webpack://angular-material-form-builder/./src/lib/directives/agreement-item/agreement-item.controller.js","webpack://angular-material-form-builder/./src/lib/directives/agreement-item/agreement-item.directive.js","webpack://angular-material-form-builder/./src/lib/directives/agreement-item/agreement-view.controller.js","webpack://angular-material-form-builder/./src/lib/directives/agreement-item/agreement-view.directive.js","webpack://angular-material-form-builder/./src/lib/directives/agreement-item/agreement-view.tpl.html","webpack://angular-material-form-builder/./src/lib/main/main.controller.js","webpack://angular-material-form-builder/./src/lib/directives/checkboxes-item/checkboxes-item.controller.js","webpack://angular-material-form-builder/./src/lib/directives/checkboxes-item/checkboxes-view.controller.js","webpack://angular-material-form-builder/./src/lib/directives/checkboxes-item/checkboxes-view.directive.js","webpack://angular-material-form-builder/./src/lib/directives/checkboxes-item/checkboxes-view.tpl.html","webpack://angular-material-form-builder/./src/lib/directives/form-item/form-item.controller.js","webpack://angular-material-form-builder/./src/lib/directives/form-item/form-item.directive.js","webpack://angular-material-form-builder/./src/lib/directives/form-item/form-item.tpl.html","webpack://angular-material-form-builder/./src/lib/directives/form-items-container/form-items-container.controller.js","webpack://angular-material-form-builder/./src/lib/directives/form-items-container/form-items-container.directive.js","webpack://angular-material-form-builder/./src/lib/directives/form-items-container/form-items-container.tpl.html","webpack://angular-material-form-builder/./src/lib/directives/form-view/form-view.controller.js","webpack://angular-material-form-builder/./src/lib/directives/form-view/form-view.directive.js","webpack://angular-material-form-builder/./src/lib/directives/form-view/form-view.tpl.html","webpack://angular-material-form-builder/./src/lib/directives/input-item/input-item.controller.js","webpack://angular-material-form-builder/./src/lib/directives/input-item/input-item.directive.js","webpack://angular-material-form-builder/./src/lib/directives/input-item/input-item.tpl.html","webpack://angular-material-form-builder/./src/lib/directives/input-item/input-view.controller.js","webpack://angular-material-form-builder/./src/lib/directives/input-item/input-view.directive.js","webpack://angular-material-form-builder/./src/lib/directives/input-item/input-view.tpl.html","webpack://angular-material-form-builder/./src/lib/directives/label-item/label-item.controller.js","webpack://angular-material-form-builder/./src/lib/directives/label-item/label-view.controller.js","webpack://angular-material-form-builder/./src/lib/directives/label-item/label-view.directive.js","webpack://angular-material-form-builder/./src/lib/directives/label-item/label-view.tpl.html","webpack://angular-material-form-builder/./src/lib/directives/matrix-item/matrix-item.controller.js","webpack://angular-material-form-builder/./src/lib/directives/matrix-item/matrix-item.directive.js","webpack://angular-material-form-builder/./src/lib/directives/matrix-item/matrix-item.tpl.html","webpack://angular-material-form-builder/./src/lib/directives/matrix-item/matrix-view.controller.js","webpack://angular-material-form-builder/./src/lib/directives/matrix-item/matrix-view.directive.js","webpack://angular-material-form-builder/./src/lib/directives/matrix-item/matrix-view.tpl.html","webpack://angular-material-form-builder/./src/lib/directives/radio-button-item/radio-button-item.controller.js","webpack://angular-material-form-builder/./src/lib/directives/radio-button-item/radio-button-item.directive.js","webpack://angular-material-form-builder/./src/lib/directives/radio-button-item/radio-button-item.tpl.html","webpack://angular-material-form-builder/./src/lib/directives/radio-button-item/radio-button-view.controller.js","webpack://angular-material-form-builder/./src/lib/directives/radio-button-item/radio-button-view.directive.js","webpack://angular-material-form-builder/./src/lib/directives/radio-button-item/radio-button-view.tpl.html","webpack://angular-material-form-builder/./src/lib/directives/select-item/select-view.controller.js","webpack://angular-material-form-builder/./src/lib/directives/select-item/select-view.directive.js","webpack://angular-material-form-builder/./src/lib/directives/select-item/select-view.tpl.html","webpack://angular-material-form-builder/./src/lib/directives/select-item/select-item.controller.js","webpack://angular-material-form-builder/./src/lib/directives/select-item/select-item.directive.js","webpack://angular-material-form-builder/./src/lib/directives/select-item/select-item.tpl.html","webpack://angular-material-form-builder/./src/lib/directives/textarea-item/textarea-item.controller.js","webpack://angular-material-form-builder/./src/lib/directives/textarea-item/textarea-item.directive.js","webpack://angular-material-form-builder/./src/lib/directives/textarea-item/textarea-item.tpl.html","webpack://angular-material-form-builder/./src/lib/directives/textarea-item/textarea-view.controller.js","webpack://angular-material-form-builder/./src/lib/directives/textarea-item/textarea-view.directive.js","webpack://angular-material-form-builder/./src/lib/directives/textarea-item/textarea-view.tpl.html","webpack://angular-material-form-builder/./src/lib/index.module.js","webpack://angular-material-form-builder/./src/lib/utils/utils.service.js","webpack://angular-material-form-builder/./src/lib/directives/upload-item/upload-item.directive.js","webpack://angular-material-form-builder/./src/lib/directives/upload-item/upload-item.tpl.html","webpack://angular-material-form-builder/./src/lib/directives/checkboxes-item/checkboxes-item.directive.js","webpack://angular-material-form-builder/./src/lib/directives/checkboxes-item/checkboxes-item.tpl.html","webpack://angular-material-form-builder/./src/lib/directives/label-item/label-item.directive.js","webpack://angular-material-form-builder/./src/lib/directives/label-item/label-item.tpl.html","webpack://angular-material-form-builder/webpack/bootstrap","webpack://angular-material-form-builder/webpack/startup","webpack://angular-material-form-builder/webpack/runtime/define property getters","webpack://angular-material-form-builder/webpack/runtime/hasOwnProperty shorthand","webpack://angular-material-form-builder/webpack/runtime/make namespace object"],"names":["root","factory","exports","module","define","amd","self","UploadItemCtrl","constructor","Utils","$element","this","Element","item","extend","config","options","UploadViewCtrl","$scope","Scope","formItem","init","isMultiple","showAllowed","isPreview","_enableWatchers","_updateMultiple","multipleUpload","input","angular","element","querySelector","attr","removeAttr","_updateAccept","showAccept","setAttribute","accept","removeAttribute","$watch","newVal","undefined","removeItem","index","splice","UploadView","$timeout","template","restrict","scope","form","controller","controllerAs","bindToController","link","attrs","ctrl","button","find","label","style","display","bind","click","e","$apply","files","target","length","i","size","textContent","sizeErrMessage","push","name","type","AgreementItemCtrl","maxSelections","value","selected","AgreementItem","AgreementViewCtrl","selectedOptions","_getSelectedOptions","disableOptions","isValid","_updateView","_updateValidity","toggleSelectedOption","filter","option","required","$setValidity","AgreementView","MainController","items","addItem","delete","up","prevItem","down","nextItem","CheckboxesItemCtrl","deleteOption","addOption","setTimeout","focus","CheckboxesViewCtrl","CheckboxesView","FormItemCtrl","$attrs","Attrs","templates","upload","agreement","chooseFromList","multipleChoices","matrix","checkboxes","textarea","props","title","helpText","deleteClicked","onDelete","_getItemTemplate","FormItem","$compile","onUp","onDown","el","FormItemsContainerCtrl","FormItemsContainer","FormViewCtrl","FormView","InputItemCtrl","InputItem","InputViewCtrl","InputView","elem","LabelItemCtrl","LabelViewCtrl","LabelView","MatrixItemCtrl","$document","RowContainer","ColumnContainer","rows","columns","deleteRow","addRow","deleteColumn","addColumn","MatrixItem","MatrixViewCtrl","valid","some","row","$watchGroup","MatrixView","RadioButtonCtrl","RadioButton","RadioButtonViewCtrl","RadioButtonView","SelectViewCtrl","SelectView","SelectCtrl","Select","TextareaItemCtrl","TextareaItem","TextareaViewCtrl","TextareaView","service","dest","src","Object","keys","reduce","result","key","directive","__webpack_module_cache__","__webpack_require__","moduleId","__webpack_modules__","d","definition","o","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag"],"mappings":"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","file":"angular-material-form-builder.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"angular-material-form-builder\"] = factory();\n\telse\n\t\troot[\"angular-material-form-builder\"] = factory();\n})(self, function() {\nreturn ","class UploadItemCtrl {\n  /**\n   * @ngInject\n   *\n   * @param {import('../../utils/utils.service').Utils} Utils\n   * @param {JQLite} $element\n   */\n  constructor(Utils, $element) {\n    this.Element = $element\n    this.item = Utils.extend(this.item || {}, {\n      config: {},\n      options: [],\n    })\n  }\n}\n\nexport { UploadItemCtrl }\n","class UploadViewCtrl {\n  /**\n   * @ngInject\n   * @param {ng.IScope} $scope\n   * @param {import('../../utils/utils.service').Utils} Utils\n   * @param {JQLite} $element\n   */\n  constructor($scope, Utils, $element) {\n    this.Scope = $scope\n    this.Element = $element\n    this.Utils = Utils\n    this.formItem = {}\n  }\n  init() {\n    this.isMultiple = false\n    this.showAllowed = false\n    this.formItem = this.Utils.extend(this.formItem || {}, {\n      config: {},\n      options: [],\n    })\n    if (this.isPreview()) {\n      this._enableWatchers()\n    }\n  }\n  _updateMultiple() {\n    this.isMultiple = !!this.formItem.config.multipleUpload\n    const input = angular.element(\n      this.Element[0].querySelector('input[type=file]')\n    )\n    if (input) {\n      this.formItem.options = []\n      if (this.isMultiple) {\n        input.attr('multiple', 'multiple')\n      } else {\n        input.removeAttr('multiple')\n      }\n    }\n  }\n\n  _updateAccept() {\n    this.showAllowed = !!this.formItem.config.showAccept\n    const input = angular.element(\n      this.Element[0].querySelector('input[type=file]')\n    )\n    if (input) {\n      if (this.showAllowed) {\n        input[0].setAttribute('accept', this.formItem.config.accept)\n      } else {\n        input[0].removeAttribute('accept')\n        delete this.formItem.config.accept\n      }\n    }\n  }\n\n  _enableWatchers() {\n    this.Scope.$watch('UploadView.formItem.config.multipleUpload', (newVal) => {\n      if (newVal !== undefined) {\n        this._updateMultiple()\n      }\n    })\n\n    this.Scope.$watch('UploadView.formItem.config.showAccept', (newVal) => {\n      if (newVal !== undefined) {\n        this._updateAccept()\n      }\n    })\n\n    this.Scope.$watch('UploadView.formItem.config.accept', (newVal) => {\n      if (newVal !== undefined) {\n        this._updateAccept()\n      }\n    })\n  }\n\n  removeItem(index) {\n    this.formItem.options.splice(index, 1)\n  }\n}\nexport { UploadViewCtrl }\n","import { UploadViewCtrl } from './upload-view.controller'\nimport UploadViewTemplate from './upload-view.tpl.html'\n\nclass UploadView {\n  /**\n   * @ngInject\n   * @param {ng.ITimeoutService} $timeout\n   */\n  constructor($timeout) {\n    this.$timeout = $timeout\n    this.template = UploadViewTemplate\n    this.restrict = 'E'\n    this.scope = {\n      formItem: '=',\n      isPreview: '&',\n      form: '=',\n    }\n    this.controller = UploadViewCtrl\n    this.controllerAs = 'UploadView'\n    this.bindToController = true\n  }\n\n  /**\n   * @see https://docs.angularjs.org/api/ng/service/$compile#-link-\n   * @param {ng.IScope} scope - scope\n   * @param {JQLite} element - element\n   * @param {ng.IAttributes} attrs - attributes\n   * @param {UploadViewCtrl} ctrl - this instance controller\n   * @param {ng.ITranscludeFunction} transcludeFn - transclude function ($transclude)\n   */\n  link(scope, element, attrs, ctrl) {\n    //this timeout is placed here in order to make sure that the creator directive of this view is finished its work\n    this.$timeout(function () {\n      ctrl.init()\n    }, 50)\n\n    const button = element.find('button')\n    const input = angular.element(element[0].querySelector('input[type=file]'))\n\n    const label = element.find('label')\n    label[0].style.display = 'none'\n    button.bind('click', function () {\n      label[0].style.display = 'none'\n      input[0].click()\n    })\n\n    input.bind('change', function (e) {\n      scope.$apply(function () {\n        const files = e.target.files\n\n        if (files.length > 0) {\n          for (let i = 0; i < files.length; i += 1) {\n            if (files[i].size >= ctrl.formItem.config.size * 1048576) {\n              label[0].style.display = 'block'\n              label[0].textContent = ctrl.formItem.config.sizeErrMessage\n              return\n            }\n\n            if (!ctrl.formItem.config.multipleUpload) ctrl.formItem.options = []\n\n            ctrl.formItem.options.push({\n              name: files[i].name,\n              size: files[i].size,\n              type: files[i].type,\n            })\n          }\n        }\n      })\n    })\n  }\n}\n\nexport { UploadView }\n","export default \"<div layout=\\\"row\\\" class=\\\"option-item\\\">\\n  <md-input-container class=\\\"md-block\\\" style=\\\"margin: 0\\\">\\n    <input type=\\\"file\\\" class=\\\"ng-hide\\\" aria-label=\\\"file\\\" />\\n    <md-input-container flex class=\\\"md-block\\\">\\n      <input\\n        type=\\\"text\\\"\\n        ng-model=\\\"fileName\\\"\\n        class=\\\"ng-hide\\\"\\n        disabled\\n        aria-label=\\\"fileName\\\"\\n      />\\n    </md-input-container>\\n  </md-input-container>\\n\\n  <md-button id=\\\"uploadButton\\\" class=\\\"md-fab md-mini\\\">\\n    <md-icon class=\\\"material-icons\\\">attach_file</md-icon>\\n  </md-button>\\n</div>\\n\\n<div>\\n  <label></label>\\n  <div\\n    style=\\\"display: grid; grid-template-columns: 8em auto; align-items: center\\\"\\n    layout=\\\"row\\\"\\n    ng-repeat=\\\"option in UploadView.formItem.options track by $index\\\"\\n  >\\n    <md-button ng-click=\\\"UploadView.removeItem($index)\\\" class=\\\"md-button\\\">\\n      <md-icon class=\\\"material-icons\\\">close</md-icon>\\n    </md-button>\\n    <span>{{option.name}}</span>\\n  </div>\\n</div>\\n\";","/**\n * @ngInject\n *\n * @param {import('../../utils/utils.service').Utils} Utils\n * @param {JQLite} $element\n */\nfunction AgreementItemCtrl(Utils, $element) {\n  this.Element = $element\n  this.item = Utils.extend(this.item || {}, {\n    config: {\n      maxSelections: null,\n    },\n    options: [\n      {\n        value: '',\n        selected: false,\n      },\n    ],\n  })\n}\n\nexport { AgreementItemCtrl }\n","import { AgreementItemCtrl } from './agreement-item.controller'\n// import AgreementItemTemplate from './agreement-item.tpl.html'\n\n/**\n * @implements {ng.IDirective}\n */\nclass AgreementItem {\n  /**\n   * @ngInject\n   */\n  constructor() {\n    this.restrict = 'E'\n    this.scope = {\n      item: '=',\n    }\n    this.controller = AgreementItemCtrl\n    this.controllerAs = 'Agreement'\n    this.bindToController = true\n  }\n}\n\nexport { AgreementItem }\n","class AgreementViewCtrl {\n  /**\n   * @ngInject\n   * @param {ng.IScope} $scope\n   * @param {import('../../utils/utils.service').Utils} Utils\n   */\n  constructor($scope, Utils) {\n    this.Scope = $scope\n    this.Utils = Utils\n    this.formItem = {}\n  }\n\n  init() {\n    this.formItem = this.Utils.extend(this.formItem || {}, {\n      config: {},\n      options: [\n        {\n          value: '',\n          selected: false,\n        },\n      ],\n    })\n\n    this.selectedOptions = this._getSelectedOptions()\n    this.disableOptions = false\n\n    this.isValid = true\n    this._updateView()\n    this._updateValidity()\n    if (this.isPreview()) {\n      this._enableWatchers()\n    }\n  }\n\n  toggleSelectedOption() {\n    this.selectedOptions = this._getSelectedOptions()\n    this._updateView()\n    this._updateValidity()\n  }\n\n  _getSelectedOptions() {\n    return this.formItem.options.filter((option) => {\n      return option.selected\n    })\n  }\n\n  _updateView() {\n    if (!this.formItem.config.maxSelections) {\n      this.disableOptions = false\n    } else if (\n      this.selectedOptions.length === this.formItem.config.maxSelections\n    ) {\n      this.disableOptions = true\n    } else {\n      this.disableOptions = false\n    }\n  }\n\n  _updateValidity() {\n    if (this.formItem.config.required) {\n      this.isValid = this.selectedOptions.length > 0\n    } else {\n      this.isValid = true\n    }\n\n    this.form.$setValidity('minSelections', this.isValid)\n  }\n\n  _enableWatchers() {\n    this.Scope.$watch('AgreementView.formItem.config.required', (newVal) => {\n      if (newVal !== undefined) {\n        this._updateView()\n        this._updateValidity()\n      }\n    })\n  }\n}\n\nexport { AgreementViewCtrl }\n","import { AgreementViewCtrl } from './agreement-view.controller'\nimport AgreementViewTemplate from './agreement-view.tpl.html'\n\nclass AgreementView {\n  /**\n   * @ngInject\n   * @param {ng.ITimeoutService} $timeout\n   */\n  constructor($timeout) {\n    this.$timeout = $timeout\n    this.template = AgreementViewTemplate\n    this.restrict = 'E'\n    this.scope = {\n      formItem: '=',\n      isPreview: '&',\n      form: '=',\n    }\n    this.controller = AgreementViewCtrl\n    this.controllerAs = 'AgreementView'\n    this.bindToController = true\n  }\n\n  /**\n   * @see https://docs.angularjs.org/api/ng/service/$compile#-link-\n   * @param {ng.IScope} scope - scope\n   * @param {JQLite} element - element\n   * @param {ng.IAttributes} attrs - attributes\n   * @param {AgreementViewCtrl} ctrl - this instance controller\n   * @param {ng.ITranscludeFunction} transcludeFn - transclude function ($transclude)\n   */\n  link(scope, element, attrs, ctrl) {\n    //this timeout is placed here in order to make sure that the creator directive of this view is finished its work\n    this.$timeout(function () {\n      ctrl.init()\n    }, 50)\n  }\n}\n\nexport { AgreementView }\n","export default \"<md-input-container>\\n  <div\\n    layout=\\\"{{AgreementView.formItem.config.direction == 'horizontal' ? 'row' : 'columb'}}\\\"\\n  >\\n    <md-checkbox\\n      ng-model=\\\"AgreementView.formItem.options[0].selected\\\"\\n      ng-change=\\\"AgreementView.toggleSelectedOption(option)\\\"\\n      ng-disabled=\\\"AgreementView.disableOptions && !option.selected\\\"\\n      aria-label=\\\"...\\\"\\n      >{{AgreementView.formItem.options[0].value}}</md-checkbox\\n    >\\n  </div>\\n\\n  <div ng-messages=\\\"AgreementView.form.$error\\\">\\n    <div ng-message=\\\"minSelections\\\">\\n      Must select {{AgreementView.formItem.maxSelections || 1}} items\\n    </div>\\n  </div>\\n</md-input-container>\\n\";","/**\n * @typedef {{type:string}} Item\n * @typedef {{items: Item[]}} FormConfig\n */\n\nclass MainController {\n  /**\n   * @ngInject\n   */\n  constructor() {\n    /**\n     * @type {FormConfig}\n     */\n    this.form = {\n      items: [],\n    }\n  }\n\n  /**\n   * Add new Item\n   * @param {string} type\n   */\n  addItem(type) {\n    this.form.items.push({\n      type,\n    })\n  }\n\n  /**\n   * Remove item at index\n   * @param {Item} item\n   * @param {number} index\n   */\n  delete(item, index) {\n    this.form.items.splice(index, 1)\n  }\n\n  /**\n   * insert before (bounded)\n   * Pops out latest element (wanted?)\n   * @param {Item} item\n   * @param {number} index\n   */\n  up(item, index) {\n    if (index !== 0) {\n      const prevItem = this.form.items[index - 1]\n      this.form.items[index] = prevItem\n      this.form.items[index - 1] = item\n    }\n  }\n\n  /**\n   * insert after (bounded)\n   * Pops out latest element (wanted?)\n   * @param {Item} item\n   * @param {number} index\n   */\n  down(item, index) {\n    if (index !== this.form.items.length - 1) {\n      const nextItem = this.form.items[index + 1]\n      this.form.items[index] = nextItem\n      this.form.items[index + 1] = item\n    }\n  }\n}\n\nexport { MainController }\n","class CheckboxesItemCtrl {\n  /**\n   * @ngInject\n   *\n   * @param {import('../../utils/utils.service').Utils} Utils\n   * @param {JQLite} $element\n   */\n  constructor(Utils, $element) {\n    this.Element = $element\n    this.item = Utils.extend(this.item || {}, {\n      config: {\n        maxSelections: null,\n      },\n      options: [\n        {\n          value: '',\n          selected: false,\n        },\n      ],\n    })\n  }\n\n  deleteOption(index) {\n    this.item.options.splice(index, 1)\n  }\n\n  addOption() {\n    this.item.options.push({\n      value: '',\n      selected: false,\n    })\n    // Focus new element\n    setTimeout(() => {\n      const options = this.Element.find('input')\n      const addedOption = options[options.length - 1]\n      addedOption.focus()\n    }, 0)\n  }\n}\n\nexport { CheckboxesItemCtrl }\n","class CheckboxesViewCtrl {\n  /**\n   * @ngInject\n   * @param {ng.IScope} $scope\n   * @param {import('../../utils/utils.service').Utils} Utils\n   */\n  constructor($scope, Utils) {\n    this.Scope = $scope\n    this.Utils = Utils\n    this.formItem = {}\n  }\n\n  init() {\n    this.formItem = this.Utils.extend(this.formItem || {}, {\n      config: {},\n      options: [],\n    })\n\n    this.selectedOptions = this._getSelectedOptions()\n    this.disableOptions = false\n\n    this.isValid = true\n    this._updateView()\n    this._updateValidity()\n    if (this.isPreview()) {\n      this._enableWatchers()\n    }\n  }\n\n  toggleSelectedOption() {\n    this.selectedOptions = this._getSelectedOptions()\n    this._updateView()\n    this._updateValidity()\n  }\n\n  _getSelectedOptions() {\n    return this.formItem.options.filter((option) => {\n      return option.selected\n    })\n  }\n\n  _updateView() {\n    if (!this.formItem.config.maxSelections) {\n      this.disableOptions = false\n    } else if (\n      this.selectedOptions.length === this.formItem.config.maxSelections\n    ) {\n      this.disableOptions = true\n    } else {\n      this.disableOptions = false\n    }\n  }\n\n  _updateValidity() {\n    if (this.formItem.config.required) {\n      this.isValid = this.selectedOptions.length > 0\n    } else {\n      this.isValid = true\n    }\n\n    this.form.$setValidity('minSelections', this.isValid)\n  }\n\n  _enableWatchers() {\n    this.Scope.$watch('CheckboxesView.formItem.config.required', (newVal) => {\n      if (newVal !== undefined) {\n        this._updateView()\n        this._updateValidity()\n      }\n    })\n  }\n}\n\nexport { CheckboxesViewCtrl }\n","import CheckboxesViewTemplate from './checkboxes-view.tpl.html'\nimport { CheckboxesViewCtrl } from './checkboxes-view.controller'\n\n/**\n * @implements {ng.IDirective}\n */\nclass CheckboxesView {\n  /**\n   * @ngInject\n   * @param {ng.ITimeoutService} $timeout\n   */\n  constructor($timeout) {\n    this.$timeout = $timeout\n    this.restrict = 'E'\n    this.template = CheckboxesViewTemplate\n    this.scope = {\n      formItem: '=',\n      isPreview: '&',\n      form: '=',\n    }\n    this.controller = CheckboxesViewCtrl\n    this.controllerAs = 'CheckboxesView'\n    this.bindToController = true\n  }\n\n  /**\n   * @see https://docs.angularjs.org/api/ng/service/$compile#-link-\n   * @param {ng.IScope} scope - scope\n   * @param {JQLite} element - element\n   * @param {ng.IAttributes} attrs - attributes\n   * @param {CheckboxesViewCtrl} ctrl - this instance controller\n   * @param {ng.ITranscludeFunction} transcludeFn - transclude function ($transclude)\n   */\n  link(scope, element, attrs, ctrl) {\n    //this timeout is placed here in order to make sure that the creator directive of this view is finished its work\n    this.$timeout(function () {\n      ctrl.init()\n    }, 50)\n  }\n}\n\nexport { CheckboxesView }\n","export default \"<md-input-container>\\n  <div\\n    layout=\\\"{{CheckboxesView.formItem.config.direction == 'horizontal' ? 'row' : 'column'}}\\\"\\n  >\\n    <md-checkbox\\n      ng-repeat=\\\"option in CheckboxesView.formItem.options track by $index\\\"\\n      ng-model=\\\"option.selected\\\"\\n      ng-change=\\\"CheckboxesView.toggleSelectedOption(option)\\\"\\n      ng-disabled=\\\"CheckboxesView.disableOptions && !option.selected\\\"\\n      aria-label=\\\"...\\\"\\n      >{{option.value}}</md-checkbox\\n    >\\n  </div>\\n\\n  <div ng-messages=\\\"CheckboxesView.form.$error\\\">\\n    <div ng-message=\\\"minSelections\\\">\\n      Must select {{CheckboxesView.formItem.maxSelections || 1}} items\\n    </div>\\n  </div>\\n</md-input-container>\\n\";","class FormItemCtrl {\n  /**\n   * @ngInject\n   * @param {ng.IAttributes} $attrs\n   * @param {import('../../utils/utils.service').Utils} Utils\n   */\n  constructor($attrs, Utils) {\n    this.Attrs = $attrs\n    this.Utils = Utils\n    this.templates = {\n      upload: '<upload-item item=\"FormItem.item\"></upload-item>',\n      agreement: '<agreement-item item=\"FormItem.item\"></agreement-item>',\n      input: '<input-item item=\"FormItem.item\"></input-item>',\n      chooseFromList:\n        '<bet-form-choose-from-list item=\"FormItem.item\"></bet-form-choose-from-list>',\n      label: '<label-item item=\"FormItem.item\"></label-item>',\n      multipleChoices:\n        '<radio-button-item item=\"FormItem.item\"></radio-button-item>',\n      matrix: '<matrix-item item=\"FormItem.item\"></matrix-item>',\n      checkboxes: '<checkboxes-item item=\"FormItem.item\"></checkboxes-item>',\n      textarea: '<textarea-item item=\"FormItem.item\"></textarea-item>',\n    }\n    this.item = {}\n  }\n\n  init() {\n    this.item = this.Utils.extend(this.item || {}, {\n      type: this.Attrs.type,\n      props: {\n        title: '',\n        helpText: '',\n      },\n      config: {\n        required: false,\n      },\n    })\n  }\n\n  deleteClicked() {\n    this.onDelete({ item: this.item, index: this.index() })\n  }\n\n  /**\n   *\n   * @param {string} type\n   */\n  _getItemTemplate(type) {\n    const prefix =\n      '' +\n      '<div class=\"form-item-container\">' +\n      '<div class=\"form-item-actions\">' +\n      '<md-button class=\"md-button\" ng-if=\"FormItem.Attrs.onDelete\" ng-click=\"FormItem.deleteClicked()\"> ' +\n      '<md-icon class=\"material-icons small\">delete</md-icon>' +\n      '</md-button>' +\n      '<md-button class=\"md-button\" ng-if=\"FormItem.Attrs.onUp\" ng-click=\"FormItem.onUp({item: FormItem.item, index: FormItem.index()})\"> ' +\n      '<md-icon class=\"material-icons small\">arrow_drop_up</md-icon>' +\n      '</md-button>' +\n      '<md-button class=\"md-button\" ng-if=\"FormItem.Attrs.onDown\" ng-click=\"FormItem.onDown({item: FormItem.item, index: FormItem.index()})\"> ' +\n      '<md-icon class=\"material-icons small\">arrow_drop_down</md-icon>' +\n      '</md-button>' +\n      '</div>' +\n      '<md-input-container>' +\n      '<label>Field Title</label>' +\n      '<input ng-model=\"FormItem.item.props.title\"/>' +\n      '</md-input-container>' +\n      '<md-input-container>' +\n      '<label>Help Text</label>' +\n      '<input ng-model=\"FormItem.item.props.helpText\" />' +\n      '</md-input-container>'\n\n    const suffix =\n      '' +\n      '<md-input-container>' +\n      '<md-checkbox ng-model=\"FormItem.item.config.required\">Required field</md-checkbox>' +\n      '</md-input-container>' +\n      '</div>'\n\n    return prefix + this.templates[type] + suffix\n  }\n}\n\nexport { FormItemCtrl }\n","import FormItemTemplate from './form-item.tpl.html'\nimport { FormItemCtrl } from './form-item.controller'\n\n/**\n * @implements {ng.IDirective}\n */\nclass FormItem {\n  /**\n   * @ngInject\n   * @param {ng.ICompileService} $compile\n   */\n  constructor($compile) {\n    this.$compile = $compile\n    this.restrict = 'E'\n    this.scope = {\n      item: '=',\n      onDelete: '&',\n      onUp: '&',\n      onDown: '&',\n      index: '&',\n    }\n    this.controller = FormItemCtrl\n    this.controllerAs = 'FormItem'\n    this.bindToController = true\n    this.template = FormItemTemplate\n  }\n\n  /**\n   * @see https://docs.angularjs.org/api/ng/service/$compile#-link-\n   * @param {ng.IScope} scope - scope\n   * @param {JQLite} element - element\n   * @param {ng.IAttributes} attrs - attributes\n   * @param {FormItemCtrl} ctrl - this instance controller\n   * @param {ng.ITranscludeFunction} transcludeFn - transclude function ($transclude)\n   */\n  link(scope, element, attrs, ctrl) {\n    const template = ctrl._getItemTemplate(attrs.type)\n    const el = this.$compile(template)(scope)\n    // element.append(el)\n    // if done like above adds twice\n    // element.append(this.$compile(template)(scope))\n    ctrl.init()\n    return el\n  }\n}\nexport { FormItem }\n","export default \"<div class=\\\"form-item-container md-inline-form\\\">\\n  <div class=\\\"form-item-actions\\\">\\n    <md-button\\n      class=\\\"md-button\\\"\\n      ng-if=\\\"FormItem.Attrs.onDelete\\\"\\n      ng-click=\\\"FormItem.deleteClicked()\\\"\\n    >\\n      <md-icon class=\\\"material-icons small\\\">delete</md-icon>\\n    </md-button>\\n    <md-button\\n      class=\\\"md-button\\\"\\n      ng-if=\\\"FormItem.Attrs.onUp\\\"\\n      ng-click=\\\"FormItem.onUp({item: FormItem.item, index: FormItem.index()})\\\"\\n    >\\n      <md-icon class=\\\"material-icons small\\\">arrow_drop_up</md-icon>\\n    </md-button>\\n    <md-button\\n      class=\\\"md-button\\\"\\n      ng-if=\\\"FormItem.Attrs.onDown\\\"\\n      ng-click=\\\"FormItem.onDown({item: FormItem.item, index: FormItem.index()})\\\"\\n    >\\n      <md-icon class=\\\"material-icons small\\\">arrow_drop_down</md-icon>\\n    </md-button>\\n  </div>\\n\\n  <md-input-container ng-if=\\\"FormItem.item.type != 'label'\\\" class=\\\"md-block\\\">\\n    <label>Field Title</label>\\n    <input ng-model=\\\"FormItem.item.props.title\\\" />\\n  </md-input-container>\\n\\n  <md-input-container ng-if=\\\"FormItem.item.type != 'label'\\\" class=\\\"md-block\\\">\\n    <label>Help Text</label>\\n    <input ng-model=\\\"FormItem.item.props.helpText\\\" />\\n  </md-input-container>\\n\\n  <md-input-container\\n    ng-if=\\\"FormItem.item.type === 'agreement'\\\"\\n    class=\\\"md-block\\\"\\n  >\\n    <label>Option Text</label>\\n    <input ng-model=\\\"FormItem.item.options[0].value\\\" />\\n  </md-input-container>\\n\\n  <div ng-switch=\\\"FormItem.item.type\\\">\\n    <upload-item ng-switch-when=\\\"upload\\\" item=\\\"FormItem.item\\\"></upload-item>\\n    <agreement-item\\n      ng-switch-when=\\\"agreement\\\"\\n      item=\\\"FormItem.item\\\"\\n    ></agreement-item>\\n    <label-item ng-switch-when=\\\"label\\\" item=\\\"FormItem.item\\\"></label-item>\\n    <input-item ng-switch-when=\\\"input\\\" item=\\\"FormItem.item\\\"></input-item>\\n    <radio-button-item\\n      ng-switch-when=\\\"multipleChoices\\\"\\n      item=\\\"FormItem.item\\\"\\n    ></radio-button-item>\\n    <matrix-item ng-switch-when=\\\"matrix\\\" item=\\\"FormItem.item\\\"></matrix-item>\\n    <checkboxes-item\\n      ng-switch-when=\\\"checkboxes\\\"\\n      item=\\\"FormItem.item\\\"\\n    ></checkboxes-item>\\n    <textarea-item\\n      ng-switch-when=\\\"textarea\\\"\\n      item=\\\"FormItem.item\\\"\\n    ></textarea-item>\\n    <select-item\\n      ng-switch-when=\\\"chooseFromList\\\"\\n      item=\\\"FormItem.item\\\"\\n    ></select-item>\\n    <p ng-switch-default>UNKNOWN TYPE</p>\\n  </div>\\n\\n  <md-input-container\\n    ng-if=\\\"FormItem.item.type != 'label' && FormItem.item.type != 'upload'\\\"\\n    class=\\\"md-block\\\"\\n  >\\n    <md-checkbox ng-model=\\\"FormItem.item.config.required\\\"\\n      >Required field</md-checkbox\\n    >\\n  </md-input-container>\\n</div>\\n\";","class FormItemsContainerCtrl {\n  /**\n   * @ngInject\n   */\n  constructor() {\n    /**\n     * @type {import('../../main/main.controller').FormConfig}\n     */\n    this.form = {\n      items: [],\n    }\n  }\n\n  /**\n   *\n   * @param {import('../../main/main.controller').Item} item\n   * @param {number} index\n   */\n  delete(item, index) {\n    this.form.items.splice(index, 1)\n  }\n\n  /**\n   *\n   * @param {import('../../main/main.controller').Item} item\n   * @param {number} index\n   */\n  up(item, index) {\n    if (index !== 0) {\n      const prevItem = this.form.items[index - 1]\n      this.form.items[index] = prevItem\n      this.form.items[index - 1] = item\n    }\n  }\n\n  /**\n   *\n   * @param {import('../../main/main.controller').Item} item\n   * @param {number} index\n   */\n  down(item, index) {\n    if (index !== this.form.items.length - 1) {\n      const nextItem = this.form.items[index + 1]\n      this.form.items[index] = nextItem\n      this.form.items[index + 1] = item\n    }\n  }\n}\n\nexport { FormItemsContainerCtrl }\n","import { FormItemsContainerCtrl } from './form-items-container.controller'\nimport FormItemsContainerTemplate from './form-items-container.tpl.html'\n\n/**\n * @implements {ng.IDirective}\n */\nclass FormItemsContainer {\n  /**\n   * @ngInject\n   */\n  constructor() {\n    this.restrict = 'E'\n    this.scope = {\n      form: '=',\n    }\n    this.template = FormItemsContainerTemplate\n    this.controller = FormItemsContainerCtrl\n    this.controllerAs = 'container'\n    this.bindToController = true\n  }\n}\n\nexport { FormItemsContainer }\n","export default \"<div>\\n  <form-item\\n    ng-repeat=\\\"item in container.form.items track by $index\\\"\\n    type=\\\"{{item.type}}\\\"\\n    item=\\\"item\\\"\\n    index=\\\"$index\\\"\\n    on-delete=\\\"container.delete(item, index)\\\"\\n    on-up=\\\"container.up(item, index)\\\"\\n    on-down=\\\"container.down(item, index)\\\"\\n  >\\n  </form-item>\\n</div>\\n\";","class FormViewCtrl {\n  /**\n   * @ngInject\n   * @param {ng.IScù} $scope\n   */\n  constructor($scope) {\n    this.Scope = $scope\n  }\n\n  init() {}\n}\n\nexport { FormViewCtrl }\n","import { FormViewCtrl } from './form-view.controller'\nimport FormViewTemplate from './form-view.tpl.html'\n\n/**\n * @implements {ng.IDirective}\n */\nclass FormView {\n  /**\n   * @ngInject\n   */\n  constructor() {\n    this.restrict = 'E'\n    this.template = FormViewTemplate\n    this.scope = {\n      form: '=',\n    }\n    this.controller = FormViewCtrl\n    this.controllerAs = 'FormView'\n    this.bindToController = true\n  }\n\n  /**\n   * @see https://docs.angularjs.org/api/ng/service/$compile#-link-\n   * @param {ng.IScope} scope - scope\n   * @param {JQLite} element - element\n   * @param {ng.IAttributes} attrs - attributes\n   * @param {FormViewCtrl} ctrl - this instance controller\n   * @param {ng.ITranscludeFunction} transcludeFn - transclude function ($transclude)\n   */\n  link(scope, element, attrs, ctrl) {\n    ctrl.init()\n  }\n}\n\nexport { FormView }\n","export default \"<div class=\\\"md-inline-form\\\">\\n  <div\\n    class=\\\"formItem\\\"\\n    ng-repeat=\\\"formItem in FormView.form.items track by $index\\\"\\n    ng-switch=\\\"formItem.type\\\"\\n    layout=\\\"column\\\"\\n  >\\n    <ng-form name=\\\"formItemForm\\\">\\n      <div>\\n        <div class=\\\"formItem-title\\\">{{formItem.props.title}}</div>\\n        <div class=\\\"formItem-help-text\\\">{{formItem.props.helpText}}</div>\\n\\n        <upload-view\\n          form-item=\\\"formItem\\\"\\n          is-preview=\\\"true\\\"\\n          form=\\\"formItemForm\\\"\\n          ng-switch-when=\\\"upload\\\"\\n        ></upload-view>\\n        <agreement-view\\n          form-item=\\\"formItem\\\"\\n          is-preview=\\\"true\\\"\\n          form=\\\"formItemForm\\\"\\n          ng-switch-when=\\\"agreement\\\"\\n        ></agreement-view>\\n        <checkboxes-view\\n          form-item=\\\"formItem\\\"\\n          is-preview=\\\"true\\\"\\n          form=\\\"formItemForm\\\"\\n          ng-switch-when=\\\"checkboxes\\\"\\n        ></checkboxes-view>\\n        <radio-button-view\\n          form-item=\\\"formItem\\\"\\n          is-preview=\\\"true\\\"\\n          form=\\\"formItemForm\\\"\\n          ng-switch-when=\\\"multipleChoices\\\"\\n        ></radio-button-view>\\n        <input-view\\n          form-item=\\\"formItem\\\"\\n          form=\\\"formItemForm\\\"\\n          ng-switch-when=\\\"input\\\"\\n        ></input-view>\\n        <textarea-view\\n          form-item=\\\"formItem\\\"\\n          form=\\\"formItemForm\\\"\\n          ng-switch-when=\\\"textarea\\\"\\n        ></textarea-view>\\n        <matrix-view\\n          form-item=\\\"formItem\\\"\\n          is-preview=\\\"true\\\"\\n          form=\\\"formItemForm\\\"\\n          ng-switch-when=\\\"matrix\\\"\\n        ></matrix-view>\\n        <select-view\\n          form-item=\\\"formItem\\\"\\n          is-preview=\\\"true\\\"\\n          form=\\\"formItemForm\\\"\\n          ng-switch-when=\\\"chooseFromList\\\"\\n        ></select-view>\\n        <label-view\\n          form-item=\\\"formItem\\\"\\n          is-preview=\\\"true\\\"\\n          form=\\\"formItemForm\\\"\\n          ng-switch-when=\\\"label\\\"\\n        ></label-view>\\n      </div>\\n    </ng-form>\\n  </div>\\n</div>\\n\";","class InputItemCtrl {\n  /**\n   * @ngInject\n   * @param {import('../../utils/utils.service').Utils} Utils\n   * @param {JQLite} $element\n   */\n  constructor(Utils, $element) {\n    this.Element = $element\n\n    this.item = Utils.extend(this.item || {}, {\n      config: {\n        type: 'text',\n      },\n    })\n  }\n}\n\nexport { InputItemCtrl }\n","import { InputItemCtrl } from './input-item.controller'\nimport InputItemTemplate from './input-item.tpl.html'\n\n/**\n * @implements {ng.IDirective}\n */\nclass InputItem {\n  /**\n   * @ngInject\n   */\n  constructor() {\n    this.restrict = 'E'\n    this.template = InputItemTemplate\n    this.scope = {\n      item: '=',\n    }\n    this.controller = InputItemCtrl\n    this.controllerAs = 'Input'\n    this.bindToController = true\n  }\n}\n\nexport { InputItem }\n","export default \"<md-input-container class=\\\"md-block\\\">\\n  <label>Placeholder</label>\\n  <input type=\\\"text\\\" ng-model=\\\"Input.item.config.placeholder\\\" />\\n</md-input-container>\\n<md-input-container class=\\\"md-block\\\">\\n  <label>Type</label>\\n  <md-select ng-model=\\\"Input.item.config.type\\\">\\n    <md-option value=\\\"text\\\">Text</md-option>\\n    <md-option value=\\\"number\\\">Number</md-option>\\n    <md-option value=\\\"email\\\">Email</md-option>\\n  </md-select>\\n</md-input-container>\\n\";","class InputViewCtrl {\n  /**\n   * @ngInject\n   * @param {import('../../utils/utils.service').Utils} Utils\n   */\n  constructor(Utils) {\n    this.Utils = Utils\n    this.formItem = {}\n  }\n\n  init() {\n    this.Utils.extend(this.formItem, {\n      config: {},\n    })\n  }\n}\n\nexport { InputViewCtrl }\n","import { InputViewCtrl } from './input-view.controller'\nimport InputViewTemplate from './input-view.tpl.html'\n\n/**\n * @implements {ng.IDirective}\n */\nclass InputView {\n  /**\n   * @ngInject\n   * @param {ng.ITimeoutService} $timeout\n   */\n  constructor($timeout) {\n    this.$timeout = $timeout\n    this.restrict = 'E'\n    this.template = InputViewTemplate\n    this.scope = {\n      formItem: '=',\n      form: '=',\n    }\n    this.controller = InputViewCtrl\n    this.controllerAs = 'InputView'\n    this.bindToController = true\n  }\n\n  /**\n   * @see https://docs.angularjs.org/api/ng/service/$compile#-link-\n   * @param {ng.IScope} scope - scope\n   * @param {JQLite} element - element\n   * @param {ng.IAttributes} attrs - attributes\n   * @param {FormItemCtrl} ctrl - this instance controller\n   * @param {ng.ITranscludeFunction} transcludeFn - transclude function ($transclude)\n   */\n  link(scope, elem, attrs, ctrl) {\n    //this timeout is placed here in order to make sure that the creator directive of this view is finished its work\n    this.$timeout(function () {\n      ctrl.init()\n    }, 50)\n  }\n}\n\nexport { InputView }\n","export default \"<md-input-container class=\\\"md-block\\\">\\n  <input\\n    ng-model=\\\"InputView.formItem.value\\\"\\n    type=\\\"{{InputView.formItem.config.type}}\\\"\\n    placeholder=\\\"{{InputView.formItem.config.placeholder}}\\\"\\n    ng-required=\\\"InputView.formItem.config.required\\\"\\n  />\\n  <div ng-messages=\\\"InputView.form.$error\\\">\\n    <div ng-message=\\\"required\\\">This field is required</div>\\n  </div>\\n</md-input-container>\\n\";","class LabelItemCtrl {\n  /**\n   * @ngInject\n   * @param {JQLite} $element\n   */\n  constructor($element) {\n    this.Element = $element\n  }\n}\n\nexport { LabelItemCtrl }\n","class LabelViewCtrl {\n  /**\n   * @ngInject\n   * @param {import('../../utils/utils.service').Utils} Utils\n   */\n  constructor(Utils) {\n    this.Utils = Utils\n  }\n\n  init() {\n    this.Utils.extend(this.formItem, {})\n  }\n}\n\nexport { LabelViewCtrl }\n","import { LabelViewCtrl } from './label-view.controller'\nimport LabelViewTemplate from './label-view.tpl.html'\n\n/**\n * @implements {ng.IDirective}\n */\nclass LabelView {\n  /**\n   * @ngInject\n   * @param {ng.ITimeoutService} $timeout\n   */\n  constructor($timeout) {\n    this.$timeout = $timeout\n    this.restrict = 'E'\n    this.template = LabelViewTemplate\n    this.scope = {\n      formItem: '=',\n      form: '=',\n    }\n    this.controller = LabelViewCtrl\n    this.controllerAs = 'LabelView'\n    this.bindToController = true\n  }\n\n  /**\n   * @see https://docs.angularjs.org/api/ng/service/$compile#-link-\n   * @param {ng.IScope} scope - scope\n   * @param {JQLite} element - element\n   * @param {ng.IAttributes} attrs - attributes\n   * @param {LabelViewCtrl} ctrl - this instance controller\n   * @param {ng.ITranscludeFunction} transcludeFn - transclude function ($transclude)\n   */\n  link(scope, elem, attrs, ctrl) {\n    //this timeout is placed here in order to make sure that the creator directive of this view is finished its work\n    this.$timeout(function () {\n      ctrl.init()\n    }, 50)\n  }\n}\n\nexport { LabelView }\n","export default \"<md-input-container class=\\\"md-block\\\">\\n  <md-content flex layout-padding layout=\\\"row\\\" layout-align=\\\"center center\\\">\\n    <pre>\\n      <span class=\\\"formItem-content\\\">{{LabelView.formItem.value}}</span>\\n    </pre>\\n  </md-content>\\n</md-input-container>\\n\";","class MatrixItemCtrl {\n  /**\n   * @ngInject\n   * @param {import('../../utils/utils.service').Utils} Utils\n   * @param {ng.IDocumentService} $document\n   */\n  constructor(Utils, $document) {\n    this.RowContainer = angular.element(\n      $document[0].querySelector('.rowContainer')\n    )\n    this.ColumnContainer = angular.element(\n      $document[0].querySelector('.columnContainer')\n    )\n\n    this.item = Utils.extend(this.item || {}, {\n      config: {\n        rows: [\n          {\n            value: '',\n          },\n        ],\n        columns: [\n          {\n            value: '',\n          },\n        ],\n      },\n    })\n  }\n\n  /**\n   *\n   * @param {number} index\n   */\n  deleteRow(index) {\n    this.item.config.rows.splice(index, 1)\n  }\n\n  addRow() {\n    this.item.config.rows.push({\n      value: '',\n    })\n\n    setTimeout(\n      function () {\n        const options = this.RowContainer.find('input')\n        const addedOption = options[options.length - 1]\n        addedOption.focus()\n      }.bind(this),\n      0\n    )\n  }\n\n  /**\n   *\n   * @param {number} index\n   */\n  deleteColumn(index) {\n    this.item.config.columns.splice(index, 1)\n  }\n\n  addColumn() {\n    this.item.config.columns.push({\n      value: '',\n    })\n\n    setTimeout(() => {\n      const options = this.ColumnContainer.find('input')\n      const addedOption = options[options.length - 1]\n      addedOption.focus()\n    }, 0)\n  }\n}\n\nexport { MatrixItemCtrl }\n","import { MatrixItemCtrl } from './matrix-item.controller'\nimport MatrixItemTemplate from './matrix-item.tpl.html'\n\n/**\n * @implements {ng.IDirective}\n */\nclass MatrixItem {\n  /**\n   * @ngInject\n   */\n  constructor() {\n    this.restrict = 'E'\n    this.template = MatrixItemTemplate\n    this.scope = {\n      item: '=',\n    }\n    this.controller = MatrixItemCtrl\n    this.controllerAs = 'Matrix'\n    this.bindToController = true\n  }\n}\nexport { MatrixItem }\n","export default \"<div\\n  class=\\\"sortable-container columnContainer\\\"\\n  layout=\\\"column\\\"\\n  sv-root\\n  sv-part=\\\"Matrix.item.config.columns\\\"\\n>\\n  <div\\n    class=\\\"option-item\\\"\\n    layout=\\\"row\\\"\\n    ng-repeat=\\\"column in Matrix.item.config.columns track by $index\\\"\\n    sv-element\\n  >\\n    <md-button\\n      class=\\\"md-button handle\\\"\\n      md-no-ink\\n      aria-label=\\\"reorder option item\\\"\\n      sv-handle\\n    >\\n      <md-icon class=\\\"material-icons\\\">reorder</md-icon>\\n    </md-button>\\n\\n    <md-input-container class=\\\"input-container\\\">\\n      <label>Column {{$index + 1}}</label>\\n      <input ng-model=\\\"column.value\\\" />\\n    </md-input-container>\\n\\n    <md-button\\n      class=\\\"md-button\\\"\\n      md-no-ink\\n      aria-label=\\\"delete column item\\\"\\n      ng-click=\\\"Matrix.deleteColumn($index)\\\"\\n    >\\n      <md-icon class=\\\"material-icons\\\">delete</md-icon>\\n      <md-tooltip md-autohide=\\\"true\\\">Delete</md-tooltip>\\n    </md-button>\\n  </div>\\n  <div layout=\\\"row\\\" layout-align=\\\"start\\\">\\n    <md-button\\n      class=\\\"md-primary add-option-button\\\"\\n      md-no-ink\\n      aria-label=\\\"add option item\\\"\\n      ng-click=\\\"Matrix.addColumn()\\\"\\n      >Add Column</md-button\\n    >\\n  </div>\\n</div>\\n\\n<div\\n  class=\\\"sortable-container rowContainer\\\"\\n  layout=\\\"column\\\"\\n  sv-root\\n  sv-part=\\\"Matrix.item.config.rows\\\"\\n>\\n  <div\\n    class=\\\"option-item\\\"\\n    layout=\\\"row\\\"\\n    ng-repeat=\\\"row in Matrix.item.config.rows track by $index\\\"\\n    sv-element\\n  >\\n    <md-button\\n      class=\\\"md-button handle\\\"\\n      md-no-ink\\n      aria-label=\\\"reorder row item\\\"\\n      sv-handle\\n    >\\n      <md-icon class=\\\"material-icons\\\">reorder</md-icon>\\n    </md-button>\\n\\n    <md-input-container class=\\\"input-container\\\">\\n      <label>Row {{$index + 1}}</label>\\n      <input ng-model=\\\"row.value\\\" />\\n    </md-input-container>\\n\\n    <md-button\\n      class=\\\"md-button\\\"\\n      md-no-ink\\n      aria-label=\\\"delete row item\\\"\\n      ng-click=\\\"Matrix.deleteRow($index)\\\"\\n    >\\n      <md-icon class=\\\"material-icons\\\">delete</md-icon>\\n      <md-tooltip md-autohide=\\\"true\\\">Delete</md-tooltip>\\n    </md-button>\\n  </div>\\n  <div layout=\\\"row\\\" layout-align=\\\"start\\\">\\n    <md-button\\n      class=\\\"md-primary add-option-button\\\"\\n      md-no-ink\\n      aria-label=\\\"add row item\\\"\\n      ng-click=\\\"Matrix.addRow()\\\"\\n      >Add row</md-button\\n    >\\n  </div>\\n</div>\\n\";","class MatrixViewCtrl {\n  /**\n   * @ngInject\n   * @param {ng.IScope} $scope\n   * @param {import('../../utils/utils.service').Utils} Utils\n   */\n  constructor($scope, Utils) {\n    this.Scope = $scope\n    this.Utils = Utils\n    this.isValid = true\n    this.formItem = {}\n  }\n\n  init() {\n    this.formItem = this.Utils.extend(this.formItem, {\n      config: {\n        rows: [],\n        columns: [],\n      },\n    })\n\n    this._updateValidity()\n    if (this.isPreview()) {\n      this._enableWatchers()\n    }\n  }\n\n  _updateValidity() {\n    let valid = true\n    if (this.formItem.config.required) {\n      valid = !this.formItem.config.rows.some(\n        (row) => typeof row['selected'] === 'undefined'\n      )\n      //   for (let i = 0; i < this.formItem.config.rows.length; i++) {\n      //     if (typeof this.formItem.config.rows[i]['selected'] === 'undefined') {\n      //       valid = false\n      //       break\n      //     }\n      //   }\n    }\n\n    this.isValid = valid\n    this.form.$setValidity('required', this.isValid)\n  }\n\n  _enableWatchers() {\n    this.Scope.$watchGroup(\n      [\n        'MatrixView.formItem.config.required',\n        'MatrixView.formItem.config.rows.length',\n      ],\n      (newVal) => {\n        if (newVal !== undefined) {\n          this._updateValidity()\n        }\n      }\n    )\n  }\n}\nexport { MatrixViewCtrl }\n","import MatrixViewTemplate from './matrix-view.tpl.html'\nimport { MatrixViewCtrl } from './matrix-view.controller'\n\n/**\n * @implements {ng.IDirective}\n */\n\nclass MatrixView {\n  /**\n   * @ngInject\n   * @param {ng.ITimeoutService} $timeout\n   */\n  constructor($timeout) {\n    this.$timeout = $timeout\n    this.restrict = 'E'\n    this.template = MatrixViewTemplate\n    this.scope = {\n      formItem: '=',\n      isPreview: '&',\n      form: '=',\n    }\n    this.controller = MatrixViewCtrl\n    this.controllerAs = 'MatrixView'\n    this.bindToController = true\n  }\n\n  /**\n   * @see https://docs.angularjs.org/api/ng/service/$compile#-link-\n   * @param {ng.IScope} scope - scope\n   * @param {JQLite} element - element\n   * @param {ng.IAttributes} attrs - attributes\n   * @param {MatrixViewCtrl} ctrl - this instance controller\n   * @param {ng.ITranscludeFunction} transcludeFn - transclude function ($transclude)\n   */\n  link(scope, elem, attrs, ctrl) {\n    //this timeout is placed here in order to make sure that the creator directive of this view is finished its work\n    this.$timeout(function () {\n      ctrl.init()\n    }, 50)\n  }\n}\n\nexport { MatrixView }\n","export default \"<md-input-container class=\\\"matrix-container md-block\\\" layout=\\\"column\\\">\\n  <div class=\\\"matrix\\\">\\n    <div class=\\\"matrix-row\\\" flex layout=\\\"row\\\">\\n      <span class=\\\"matrix-cell\\\" flex=\\\"20\\\"></span>\\n      <span\\n        class=\\\"matrix-cell matrix-cell-header\\\"\\n        flex\\n        ng-repeat=\\\"column in MatrixView.formItem.config.columns track by $index\\\"\\n        >{{column.value}}</span\\n      >\\n    </div>\\n    <div\\n      class=\\\"matrix-row\\\"\\n      ng-repeat=\\\"row in MatrixView.formItem.config.rows track by $index\\\"\\n      layout=\\\"row\\\"\\n    >\\n      <span class=\\\"matrix-cell\\\" flex=\\\"20\\\" layout=\\\"column\\\" layout-align=\\\"center\\\"\\n        >{{row.value}}</span\\n      >\\n      <md-radio-group\\n        ng-model=\\\"row.selected\\\"\\n        ng-change=\\\"MatrixView._updateValidity()\\\"\\n        flex\\n        layout=\\\"row\\\"\\n      >\\n        <span\\n          class=\\\"matrix-cell radio-button-cell\\\"\\n          flex\\n          ng-repeat=\\\"column in MatrixView.formItem.config.columns track by $index\\\"\\n        >\\n          <md-radio-button\\n            value=\\\"{{column.value}}\\\"\\n            aria-label=\\\"...\\\"\\n          ></md-radio-button>\\n        </span>\\n      </md-radio-group>\\n    </div>\\n  </div>\\n\\n  <div ng-messages=\\\"MatrixView.form.$error\\\">\\n    <div ng-message=\\\"required\\\">This is required</div>\\n  </div>\\n</md-input-container>\\n\";","class RadioButtonCtrl {\n  /**\n   * @ngInject\n   * @param {import('../../utils/utils.service').Utils} Utils\n   * @param {JQLite} $element\n   */\n  constructor(Utils, $element) {\n    this.Element = $element\n    this.item = Utils.extend(this.item || {}, {\n      config: {},\n      options: [\n        {\n          value: '',\n        },\n      ],\n    })\n  }\n\n  deleteOption(index) {\n    this.item.options.splice(index, 1)\n  }\n\n  addOption() {\n    this.item.options.push({\n      value: '',\n    })\n\n    setTimeout(() => {\n      const options = this.Element.find('input')\n      const addedOption = options[options.length - 1]\n      addedOption.focus()\n    }, 0)\n  }\n}\n\nexport { RadioButtonCtrl }\n","import { RadioButtonCtrl } from './radio-button-item.controller'\nimport RadioButtonTemplate from './radio-button-item.tpl.html'\n\n/**\n * @implements {ng.IDirective}\n */\n\nclass RadioButton {\n  /**\n   * @ngInject\n   */\n  constructor() {\n    this.restrict = 'E'\n    this.template = RadioButtonTemplate\n    this.scope = {\n      item: '=',\n    }\n    this.controller = RadioButtonCtrl\n    this.controllerAs = 'RadioButton'\n    this.bindToController = true\n  }\n}\n\nexport { RadioButton }\n","export default \"<div\\n  class=\\\"sortable-container\\\"\\n  layout=\\\"column\\\"\\n  sv-root\\n  sv-part=\\\"RadioButton.item.options\\\"\\n>\\n  <md-switch\\n    ng-model=\\\"RadioButton.item.config.direction\\\"\\n    ng-true-value=\\\"'horizontal'\\\"\\n    ng-false-value=\\\"'vertical'\\\"\\n  >\\n    Layout direction ({{RadioButton.item.config.direction == 'horizontal' ?\\n    'Horizontal' : 'Vertical'}})\\n  </md-switch>\\n\\n  <div\\n    class=\\\"option-item\\\"\\n    layout=\\\"row\\\"\\n    ng-repeat=\\\"option in RadioButton.item.options track by $index\\\"\\n    sv-element\\n  >\\n    <md-button\\n      class=\\\"md-button handle\\\"\\n      md-no-ink\\n      aria-label=\\\"reorder option item\\\"\\n      sv-handle\\n    >\\n      <md-icon class=\\\"material-icons\\\">reorder</md-icon>\\n    </md-button>\\n\\n    <md-input-container class=\\\"md-block\\\">\\n      <label>Option {{$index + 1}}</label>\\n      <input ng-model=\\\"option.value\\\" />\\n    </md-input-container>\\n\\n    <md-button\\n      class=\\\"md-button md-warn\\\"\\n      ng-click=\\\"RadioButton.deleteOption($index)\\\"\\n    >\\n      <md-icon class=\\\"material-icons\\\">delete</md-icon>\\n    </md-button>\\n  </div>\\n\\n  <md-button class=\\\"md-raised md-accent\\\" ng-click=\\\"RadioButton.addOption()\\\"\\n    >Add Option</md-button\\n  >\\n</div>\\n\";","class RadioButtonViewCtrl {\n  /**\n   * @ngInject\n   * @param {import('../../utils/utils.service').Utils} Utils\n   */\n  constructor(Utils) {\n    this.Utils = Utils\n    this.formItem = {}\n  }\n\n  init() {\n    this.formItem = this.Utils.extend(this.formItem, {\n      config: {},\n      options: [],\n    })\n  }\n}\n\nexport { RadioButtonViewCtrl }\n","import { RadioButtonViewCtrl } from './radio-button-view.controller'\nimport RadioButtonViewTemplate from './radio-button-view.tpl.html'\n\nclass RadioButtonView {\n  /**\n   * @ngInject\n   * @param {ng.ITimeoutService} $timeout\n   */\n  constructor($timeout) {\n    this.$timeout = $timeout\n    this.restrict = 'E'\n    this.template = RadioButtonViewTemplate\n    this.scope = {\n      formItem: '=',\n      isPreview: '&',\n      form: '=',\n    }\n    this.controller = RadioButtonViewCtrl\n    this.controllerAs = 'RadioButtonView'\n    this.bindToController = true\n  }\n\n  /**\n   * @see https://docs.angularjs.org/api/ng/service/$compile#-link-\n   * @param {ng.IScope} scope - scope\n   * @param {JQLite} element - element\n   * @param {ng.IAttributes} attrs - attributes\n   * @param {RadioButtonViewCtrl} ctrl - this instance controller\n   * @param {ng.ITranscludeFunction} transcludeFn - transclude function ($transclude)\n   */\n  link(scope, elem, attrs, ctrl) {\n    //this timeout is placed here in order to make sure that the creator directive of this view is finished its work\n    this.$timeout(function () {\n      ctrl.init()\n    }, 50)\n  }\n}\n\nexport { RadioButtonView }\n","export default \"<md-input-container class=\\\"md-block\\\">\\n  <md-radio-group\\n    name=\\\"formItemInput\\\"\\n    ng-required=\\\"RadioButtonView.formItem.config.required\\\"\\n    ng-model=\\\"RadioButtonView.formItem.value\\\"\\n    layout=\\\"{{RadioButtonView.formItem.config.direction == 'horizontal' ? 'row' : 'column'}}\\\"\\n    required\\n  >\\n    <md-radio-button\\n      ng-repeat=\\\"option in RadioButtonView.formItem.options track by $index\\\"\\n      value=\\\"{{option.value}}\\\"\\n      aria-label=\\\"...\\\"\\n    >\\n      {{option.value}}\\n    </md-radio-button>\\n  </md-radio-group>\\n\\n  <div ng-messages=\\\"RadioButtonView.form.$error\\\">\\n    <div ng-message=\\\"required\\\">This field is required</div>\\n  </div>\\n</md-input-container>\\n\";","class SelectViewCtrl {\n  /**\n   * @ngInject\n   * @param {import('../../utils/utils.service').Utils} Utils\n   */\n  constructor(Utils) {\n    this.Utils = Utils\n    this.formItem = {}\n  }\n\n  init() {\n    this.formItem = this.Utils.extend(this.formItem, {\n      config: {},\n      options: [],\n    })\n  }\n}\n\nexport { SelectViewCtrl }\n","import SelectViewTemplate from './select-view.tpl.html'\nimport { SelectViewCtrl } from './select-view.controller'\n\n/**\n * @implements {ng.IDirective}\n */\nclass SelectView {\n  /**\n   * @ngInject\n   * @param {ng.ITimeoutService} $timeout\n   */\n  constructor($timeout) {\n    this.$timeout = $timeout\n\n    this.restrict = 'E'\n    this.template = SelectViewTemplate\n    this.scope = {\n      formItem: '=',\n      isPreview: '&',\n      form: '=',\n    }\n    this.controller = SelectViewCtrl\n    this.controllerAs = 'SelectView'\n    this.bindToController = true\n  }\n\n  /**\n   * @see https://docs.angularjs.org/api/ng/service/$compile#-link-\n   * @param {ng.IScope} scope - scope\n   * @param {JQLite} element - element\n   * @param {ng.IAttributes} attrs - attributes\n   * @param {SelectViewCtrl} ctrl - this instance controller\n   * @param {ng.ITranscludeFunction} transcludeFn - transclude function ($transclude)\n   */\n  link(scope, elem, attrs, ctrl) {\n    //this timeout is placed here in order to make sure that the creator directive of this view is finished its work\n    this.$timeout(function () {\n      ctrl.init()\n    }, 50)\n  }\n}\n\nexport { SelectView }\n","export default \"<md-input-container class=\\\"md-block\\\">\\n  <md-select\\n    name=\\\"formItemInput\\\"\\n    ng-required=\\\"SelectView.formItem.config.required\\\"\\n    ng-model=\\\"SelectView.formItem.value\\\"\\n  >\\n    <md-option\\n      ng-repeat=\\\"option in SelectView.formItem.options track by $index\\\"\\n      ng-value=\\\"option.value\\\"\\n      >{{ option.value }}</md-option\\n    >\\n  </md-select>\\n  <div ng-messages=\\\"SelectView.form.$error\\\">\\n    <div ng-message=\\\"required\\\">This field is required</div>\\n  </div>\\n</md-input-container>\\n\";","class SelectCtrl {\n  /**\n   * @ngInject\n   * @param {import('../../utils/utils.service').Utils} Utils\n   * @param {JQLite} $element\n   */\n  constructor(Utils, $element) {\n    this.Element = $element\n    this.item = Utils.extend(this.item || {}, {\n      config: {},\n      options: [\n        {\n          value: '',\n        },\n      ],\n    })\n  }\n\n  /**\n   *\n   * @param {number} index\n   */\n  deleteOption(index) {\n    this.item.options.splice(index, 1)\n  }\n\n  addOption() {\n    this.item.options.push({\n      value: '',\n    })\n\n    setTimeout(() => {\n      const options = this.Element.find('input')\n      const addedOption = options[options.length - 1]\n      addedOption.focus()\n    }, 0)\n  }\n}\n\nexport { SelectCtrl }\n","import SelectTemplate from './select-item.tpl.html'\nimport { SelectCtrl } from './select-item.controller'\n\n/**\n * @implements {ng.IDirective}\n */\nclass Select {\n  /**\n   * @ngInject\n   */\n  constructor() {\n    this.restrict = 'E'\n    this.template = SelectTemplate\n    this.scope = {\n      item: '=',\n    }\n    this.controller = SelectCtrl\n    this.controllerAs = 'Select'\n    this.bindToController = true\n  }\n}\n\nexport { Select }\n","export default \"<div\\n  class=\\\"sortable-container\\\"\\n  layout=\\\"column\\\"\\n  sv-root\\n  sv-part=\\\"Select.item.options\\\"\\n>\\n  <div\\n    class=\\\"option-item\\\"\\n    layout=\\\"row\\\"\\n    ng-repeat=\\\"option in Select.item.options track by $index\\\"\\n    sv-element\\n  >\\n    <md-button\\n      class=\\\"md-button handle\\\"\\n      md-no-ink\\n      aria-label=\\\"reorder option item\\\"\\n      sv-handle\\n    >\\n      <md-icon class=\\\"material-icons\\\">reorder</md-icon>\\n    </md-button>\\n\\n    <md-input-container class=\\\"md-block\\\">\\n      <label>Option {{$index + 1}}</label>\\n      <input ng-model=\\\"option.value\\\" />\\n    </md-input-container>\\n\\n    <md-button class=\\\"md-button md-warn\\\" ng-click=\\\"Select.deleteOption($index)\\\">\\n      <md-icon class=\\\"material-icons\\\">delete</md-icon>\\n    </md-button>\\n  </div>\\n\\n  <md-button class=\\\"md-raised md-accent\\\" ng-click=\\\"Select.addOption()\\\"\\n    >Add Option</md-button\\n  >\\n</div>\\n\";","class TextareaItemCtrl {\n  /**\n   * @ngInject\n   * @param {import('../../utils/utils.service').Utils} Utils\n   * @param {JQLite} $element\n   */\n  constructor(Utils, $element) {\n    this.Element = $element\n\n    this.item = Utils.extend(this.item || {}, {\n      config: {},\n    })\n  }\n}\n\nexport { TextareaItemCtrl }\n","import { TextareaItemCtrl } from './textarea-item.controller'\nimport TextareaItemTemplate from './textarea-item.tpl.html'\n\n/**\n * @implements {ng.IDirective}\n */\nclass TextareaItem {\n  /**\n   * @ngInject\n   */\n  constructor() {\n    this.restrict = 'E'\n    this.template = TextareaItemTemplate\n    this.scope = {\n      item: '=',\n    }\n    this.controller = TextareaItemCtrl\n    this.controllerAs = 'Textarea'\n    this.bindToController = true\n  }\n}\n\nexport { TextareaItem }\n","export default \"<md-input-container class=\\\"md-block\\\">\\n  <label>Placeholder</label>\\n  <input type=\\\"text\\\" ng-model=\\\"Textarea.item.config.placeholder\\\" />\\n</md-input-container>\\n\";","class TextareaViewCtrl {\n  /**\n   * @ngInject\n   * @param {import('../../utils/utils.service').Utils} Utils\n   */\n  constructor(Utils) {\n    this.Utils = Utils\n    this.formItem = {}\n  }\n\n  init() {\n    this.formItem = this.Utils.extend(this.formItem, {\n      config: {},\n    })\n  }\n}\n\nexport { TextareaViewCtrl }\n","import { TextareaViewCtrl } from './textarea-view.controller'\nimport TextareaViewTemplate from './textarea-view.tpl.html'\n\n/**\n * @implements {ng.IDirective}\n */\n\nclass TextareaView {\n  /**\n   * @ngInject\n   * @param {ng.ITimeoutService} $timeout\n   */\n  constructor($timeout) {\n    this.$timeout = $timeout\n    this.scope = {\n      formItem: '=',\n      form: '=',\n    }\n    this.restrict = 'E'\n    this.template = TextareaViewTemplate\n    this.controller = TextareaViewCtrl\n    this.controllerAs = 'TextareaView'\n    this.bindToController = true\n  }\n\n  /**\n   * @see https://docs.angularjs.org/api/ng/service/$compile#-link-\n   * @param {ng.IScope} scope - scope\n   * @param {JQLite} element - element\n   * @param {ng.IAttributes} attrs - attributes\n   * @param {TextareaViewCtrl} ctrl - this instance controller\n   * @param {ng.ITranscludeFunction} transcludeFn - transclude function ($transclude)\n   */\n  link(scope, elem, attrs, ctrl) {\n    //this timeout is placed here in order to make sure that the creator directive of this view is finished its work\n    this.$timeout(function () {\n      ctrl.init()\n    }, 50)\n  }\n}\n\nexport { TextareaView }\n","export default \"<md-input-container class=\\\"md-block\\\">\\n  <textarea\\n    ng-model=\\\"TextareaView.formItem.value\\\"\\n    placeholder=\\\"{{TextareaView.formItem.config.placeholder}}\\\"\\n    ng-required=\\\"TextareaView.formItem.config.required\\\"\\n  ></textarea>\\n  <div ng-messages=\\\"TextareaView.form.$error\\\">\\n    <div ng-message=\\\"required\\\">This field is required</div>\\n  </div>\\n</md-input-container>\\n\";","import './index.scss'\nimport { UploadItem } from './directives/upload-item/upload-item.directive'\nimport { UploadView } from './directives/upload-item/upload-view.directive'\nimport { AgreementItem } from './directives/agreement-item/agreement-item.directive'\nimport { AgreementView } from './directives/agreement-item/agreement-view.directive'\nimport { MainController } from './main/main.controller'\nimport { Utils } from './utils/utils.service'\nimport { CheckboxesItem } from './directives/checkboxes-item/checkboxes-item.directive'\nimport { CheckboxesView } from './directives/checkboxes-item/checkboxes-view.directive'\nimport { FormItem } from './directives/form-item/form-item.directive'\nimport { FormItemsContainer } from './directives/form-items-container/form-items-container.directive'\nimport { FormView } from './directives/form-view/form-view.directive'\nimport { InputItem } from './directives/input-item/input-item.directive'\nimport { InputView } from './directives/input-item/input-view.directive'\nimport { LabelItem } from './directives/label-item/label-item.directive'\nimport { LabelView } from './directives/label-item/label-view.directive'\nimport { MatrixItem } from './directives/matrix-item/matrix-item.directive'\nimport { MatrixView } from './directives/matrix-item/matrix-view.directive'\nimport { RadioButton } from './directives/radio-button-item/radio-button-item.directive'\nimport { RadioButtonView } from './directives/radio-button-item/radio-button-view.directive'\nimport { SelectView } from './directives/select-item/select-view.directive'\nimport { Select } from './directives/select-item/select-item.directive'\nimport { TextareaItem } from './directives/textarea-item/textarea-item.directive'\nimport { TextareaView } from './directives/textarea-item/textarea-view.directive'\n\nexport default angular\n  .module('angularMaterialFormBuilder', [\n    'ngMaterial',\n    'angular-sortable-view',\n    'ngMessages',\n  ])\n  .service('Utils', Utils)\n  .controller('MainController', MainController)\n  .directive('uploadItem', UploadItem)\n  .directive('uploadView', UploadView)\n  .directive('agreementItem', AgreementItem)\n  .directive('agreementView', AgreementView)\n  .directive('checkboxesItem', CheckboxesItem)\n  .directive('checkboxesView', CheckboxesView)\n  .directive('formItem', FormItem)\n  .directive('formItemsContainer', FormItemsContainer)\n  .directive('formView', FormView)\n  .directive('inputItem', InputItem)\n  .directive('inputView', InputView)\n  .directive('labelItem', LabelItem)\n  .directive('labelView', LabelView)\n  .directive('matrixItem', MatrixItem)\n  .directive('matrixView', MatrixView)\n  .directive('radioButtonItem', RadioButton)\n  .directive('radioButtonView', RadioButtonView)\n  .directive('selectItem', Select)\n  .directive('selectView', SelectView)\n  .directive('textareaItem', TextareaItem)\n  .directive('textareaView', TextareaView)\n","class Utils {\n  /**\n   * Recursively extend object properties\n   * @param {Object} dest\n   * @param {Object} src\n   * @returns {Object}\n   */\n  extend(dest, src) {\n    return Object.keys(src).reduce(\n      (result, key) => {\n        if (typeof result[key] === 'undefined') {\n          result[key] = src[key]\n        } else if (typeof src[key] === 'object') {\n          result[key] = this.extend(result[key], src[key])\n        }\n        return result\n      },\n      typeof dest === 'undefined' ? {} : dest\n    )\n  }\n}\n\nexport { Utils }\n","import UploadItemTemplate from './upload-item.tpl.html'\nimport { UploadItemCtrl } from './upload-item.controller'\n\n/**\n * @implements {ng.IDirective}\n */\nfunction UploadItem() {\n  const directive = {\n    restrict: 'E',\n    template: UploadItemTemplate,\n    scope: {\n      item: '=',\n    },\n    controller: UploadItemCtrl,\n    controllerAs: 'Upload',\n    bindToController: true,\n  }\n\n  return directive\n}\n\nexport { UploadItem }\n","export default \"<div\\n  class=\\\"sortable-container\\\"\\n  layout=\\\"column\\\"\\n  sv-root\\n  sv-part=\\\"Upload.item.options\\\"\\n>\\n  <md-switch\\n    ng-model=\\\"Upload.item.config.multipleUpload\\\"\\n    ng-true-value=\\\"true\\\"\\n    ng-false-value=\\\"false\\\"\\n  >\\n    Multiple\\n  </md-switch>\\n\\n  <md-input-container class=\\\"md-block\\\">\\n    <span>File size: {{Upload.item.config.size}} Mb</span>\\n    <input\\n      type=\\\"number\\\"\\n      id=\\\"size\\\"\\n      name=\\\"size\\\"\\n      min=\\\"1\\\"\\n      max=\\\"10\\\"\\n      step=\\\"0.5\\\"\\n      aria-label=\\\"size\\\"\\n      ng-model=\\\"Upload.item.config.size\\\"\\n    />\\n  </md-input-container>\\n\\n  <md-input-container class=\\\"md-block\\\">\\n    <label>Size error message</label>\\n    <textarea\\n      ng-model=\\\"Upload.item.config.sizeErrMessage\\\"\\n      md-maxlength=\\\"150\\\"\\n      rows=\\\"2\\\"\\n    ></textarea>\\n  </md-input-container>\\n\\n  <md-switch\\n    ng-model=\\\"Upload.item.config.showAccept\\\"\\n    ng-true-value=\\\"true\\\"\\n    ng-false-value=\\\"false\\\"\\n  >\\n    Show Types allowed\\n  </md-switch>\\n\\n  <md-input-container class=\\\"md-block\\\" ng-if=\\\"Upload.item.config.showAccept\\\">\\n    <label>Types allowed</label>\\n    <textarea\\n      ng-model=\\\"Upload.item.config.accept\\\"\\n      md-maxlength=\\\"150\\\"\\n      rows=\\\"2\\\"\\n    ></textarea>\\n  </md-input-container>\\n</div>\\n\";","import CheckboxesItemTemplate from './checkboxes-item.tpl.html'\nimport { CheckboxesItemCtrl } from './checkboxes-item.controller'\n\n/**\n * @implements {ng.IDirective}\n */\nfunction CheckboxesItem() {\n  const directive = {\n    restrict: 'E',\n    template: CheckboxesItemTemplate,\n    scope: {\n      item: '=',\n    },\n    controller: CheckboxesItemCtrl,\n    controllerAs: 'Checkboxes',\n    bindToController: true,\n  }\n\n  return directive\n}\n\nexport { CheckboxesItem }\n","export default \"<div\\n  class=\\\"sortable-container\\\"\\n  layout=\\\"column\\\"\\n  sv-root\\n  sv-part=\\\"Checkboxes.item.options\\\"\\n>\\n  <md-input-container class=\\\"md-block\\\">\\n    <label>Max Selections</label>\\n    <input type=\\\"number\\\" ng-model=\\\"Checkboxes.item.config.maxSelections\\\" />\\n  </md-input-container>\\n\\n  <md-switch\\n    ng-model=\\\"Checkboxes.item.config.direction\\\"\\n    ng-true-value=\\\"'horizontal'\\\"\\n    ng-false-value=\\\"'vertical'\\\"\\n  >\\n    Layout direction ({{Checkboxes.item.config.direction == 'horizontal' ?\\n    'Horizontal' : 'Vertical'}})\\n  </md-switch>\\n\\n  <div\\n    class=\\\"option-item\\\"\\n    layout=\\\"row\\\"\\n    ng-repeat=\\\"option in Checkboxes.item.options track by $index\\\"\\n    sv-element\\n  >\\n    <md-button\\n      class=\\\"md-button handle\\\"\\n      md-no-ink\\n      aria-label=\\\"reorder option item\\\"\\n      sv-handle\\n    >\\n      <md-icon class=\\\"material-icons\\\">reorder</md-icon>\\n    </md-button>\\n\\n    <md-input-container class=\\\"md-block\\\">\\n      <label>Option {{$index + 1}}</label>\\n      <input ng-model=\\\"option.value\\\" />\\n    </md-input-container>\\n\\n    <md-button class=\\\"md-button\\\" ng-click=\\\"Checkboxes.deleteOption($index)\\\">\\n      <md-icon class=\\\"material-icons\\\">delete</md-icon>\\n    </md-button>\\n  </div>\\n  <div layout=\\\"row\\\" layout-align=\\\"start\\\">\\n    <md-button\\n      class=\\\"md-primary add-option-button\\\"\\n      ng-click=\\\"Checkboxes.addOption()\\\"\\n    >\\n      <md-icon class=\\\"material-icons\\\">add</md-icon>\\n    </md-button>\\n  </div>\\n</div>\\n\";","import { LabelItemCtrl } from './label-item.controller'\nimport LabelItemTemplate from './label-item.tpl.html'\n\n/**\n * @implements {ng.IDirective}\n */\nclass LabelItem {\n  constructor() {\n    this.restrict = 'E'\n    this.template = LabelItemTemplate\n    this.scope = {\n      item: '=',\n    }\n    this.controller = LabelItemCtrl\n    this.controllerAs = 'Label'\n    this.bindToController = true\n  }\n}\n\nexport { LabelItem }\n","export default \"<md-input-container class=\\\"md-block\\\">\\n  <label>Text</label>\\n  <textarea ng-model=\\\"Label.item.value\\\" md-maxlength=\\\"150\\\" rows=\\\"5\\\"></textarea>\\n</md-input-container>\\n\";","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// module exports must be returned from runtime so entry inlining is disabled\n// startup\n// Load entry module and return exports\nreturn __webpack_require__(999);\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop)","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};"],"sourceRoot":""}