!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports["angular-material-form-builder"]=e():t["angular-material-form-builder"]=e()}(self,(function(){return(()=>{"use strict";var t={999:(t,e,n)=>{n.r(e),n.d(e,{default:()=>L});class i{constructor(t,e){this.Element=e,this.item=t.extend(this.item||{},{config:{},options:[]})}}i.$inject=["Utils","$element"];class o{constructor(t,e,n){this.Scope=t,this.Element=n,this.Utils=e,this.formItem={}}init(){this.isMultiple=!1,this.showAllowed=!1,this.formItem=this.Utils.extend(this.formItem||{},{config:{},options:[]}),this.isPreview()&&this._enableWatchers()}_updateMultiple(){this.isMultiple=!!this.formItem.config.multipleUpload;const t=angular.element(this.Element[0].querySelector("input[type=file]"));t&&(this.formItem.options=[],this.isMultiple?t.attr("multiple","multiple"):t.removeAttr("multiple"))}_updateAccept(){this.showAllowed=!!this.formItem.config.showAccept;const t=angular.element(this.Element[0].querySelector("input[type=file]"));t&&(this.showAllowed?t[0].setAttribute("accept",this.formItem.config.accept):(t[0].removeAttribute("accept"),delete this.formItem.config.accept))}_enableWatchers(){this.Scope.$watch("UploadView.formItem.config.multipleUpload",(t=>{void 0!==t&&this._updateMultiple()})),this.Scope.$watch("UploadView.formItem.config.showAccept",(t=>{void 0!==t&&this._updateAccept()})),this.Scope.$watch("UploadView.formItem.config.accept",(t=>{void 0!==t&&this._updateAccept()}))}removeItem(t){this.formItem.options.splice(t,1)}}o.$inject=["$scope","Utils","$element"];class s{constructor(t){this.$timeout=t,this.template='<div layout="row" class="option-item">\n  <md-input-container class="md-block" style="margin: 0">\n    <input type="file" class="ng-hide" aria-label="file" />\n    <md-input-container flex class="md-block">\n      <input\n        type="text"\n        ng-model="fileName"\n        class="ng-hide"\n        disabled\n        aria-label="fileName"\n      />\n    </md-input-container>\n  </md-input-container>\n\n  <md-button id="uploadButton" class="md-fab md-mini">\n    <md-icon class="material-icons">attach_file</md-icon>\n  </md-button>\n</div>\n\n<div>\n  <label></label>\n  <div\n    style="display: grid; grid-template-columns: 8em auto; align-items: center"\n    layout="row"\n    ng-repeat="option in UploadView.formItem.options track by $index"\n  >\n    <md-button ng-click="UploadView.removeItem($index)" class="md-button">\n      <md-icon class="material-icons">close</md-icon>\n    </md-button>\n    <span>{{option.name}}</span>\n  </div>\n</div>\n',this.restrict="E",this.scope={formItem:"=",isPreview:"&",form:"="},this.controller=o,this.controllerAs="UploadView",this.bindToController=!0}link(t,e,n,i){this.$timeout((function(){i.init()}),50);const o=e.find("button"),s=angular.element(e[0].querySelector("input[type=file]")),m=e.find("label");m[0].style.display="none",o.bind("click",(function(){m[0].style.display="none",s[0].click()})),s.bind("change",(function(e){t.$apply((function(){const t=e.target.files;if(t.length>0)for(let e=0;e<t.length;e+=1){if(t[e].size>=1048576*i.formItem.config.size)return m[0].style.display="block",void(m[0].textContent=i.formItem.config.sizeErrMessage);i.formItem.config.multipleUpload||(i.formItem.options=[]),i.formItem.options.push({name:t[e].name,size:t[e].size,type:t[e].type})}}))}))}}function m(t,e){this.Element=e,this.item=t.extend(this.item||{},{config:{maxSelections:null},options:[{value:"",selected:!1}]})}s.$inject=["$timeout"],m.$inject=["Utils","$element"];class r{constructor(){this.restrict="E",this.scope={item:"="},this.controller=m,this.controllerAs="Agreement",this.bindToController=!0}}r.$inject=[];class l{constructor(t,e){this.Scope=t,this.Utils=e,this.formItem={}}init(){this.formItem=this.Utils.extend(this.formItem||{},{config:{},options:[{value:"",selected:!1}]}),this.selectedOptions=this._getSelectedOptions(),this.disableOptions=!1,this.isValid=!0,this._updateView(),this._updateValidity(),this.isPreview()&&this._enableWatchers()}toggleSelectedOption(){this.selectedOptions=this._getSelectedOptions(),this._updateView(),this._updateValidity()}_getSelectedOptions(){return this.formItem.options.filter((t=>t.selected))}_updateView(){this.formItem.config.maxSelections&&this.selectedOptions.length===this.formItem.config.maxSelections?this.disableOptions=!0:this.disableOptions=!1}_updateValidity(){this.formItem.config.required?this.isValid=this.selectedOptions.length>0:this.isValid=!0,this.form.$setValidity("minSelections",this.isValid)}_enableWatchers(){this.Scope.$watch("AgreementView.formItem.config.required",(t=>{void 0!==t&&(this._updateView(),this._updateValidity())}))}}l.$inject=["$scope","Utils"];class c{constructor(t){this.$timeout=t,this.template='<md-input-container>\n  <div\n    layout="{{AgreementView.formItem.config.direction == \'horizontal\' ? \'row\' : \'columb\'}}"\n  >\n    <md-checkbox\n      ng-model="AgreementView.formItem.options[0].selected"\n      ng-change="AgreementView.toggleSelectedOption(option)"\n      ng-disabled="AgreementView.disableOptions && !option.selected"\n      aria-label="..."\n      >{{AgreementView.formItem.options[0].value}}</md-checkbox\n    >\n  </div>\n\n  <div ng-messages="AgreementView.form.$error">\n    <div ng-message="minSelections">\n      Must select {{AgreementView.formItem.maxSelections || 1}} items\n    </div>\n  </div>\n</md-input-container>\n',this.restrict="E",this.scope={formItem:"=",isPreview:"&",form:"="},this.controller=l,this.controllerAs="AgreementView",this.bindToController=!0}link(t,e,n,i){this.$timeout((function(){i.init()}),50)}}c.$inject=["$timeout"];class a{constructor(){this.form={items:[]}}addItem(t){this.form.items.push({type:t})}delete(t,e){this.form.items.splice(e,1)}up(t,e){if(0!==e){const n=this.form.items[e-1];this.form.items[e]=n,this.form.items[e-1]=t}}down(t,e){if(e!==this.form.items.length-1){const n=this.form.items[e+1];this.form.items[e]=n,this.form.items[e+1]=t}}}a.$inject=[];class d{constructor(t,e){this.Element=e,this.item=t.extend(this.item||{},{config:{maxSelections:null},options:[{value:"",selected:!1}]})}deleteOption(t){this.item.options.splice(t,1)}addOption(){this.item.options.push({value:"",selected:!1}),setTimeout((()=>{const t=this.Element.find("input");t[t.length-1].focus()}),0)}}d.$inject=["Utils","$element"];class u{constructor(t,e){this.Scope=t,this.Utils=e,this.formItem={}}init(){this.formItem=this.Utils.extend(this.formItem||{},{config:{},options:[]}),this.selectedOptions=this._getSelectedOptions(),this.disableOptions=!1,this.isValid=!0,this._updateView(),this._updateValidity(),this.isPreview()&&this._enableWatchers()}toggleSelectedOption(){this.selectedOptions=this._getSelectedOptions(),this._updateView(),this._updateValidity()}_getSelectedOptions(){return this.formItem.options.filter((t=>t.selected))}_updateView(){this.formItem.config.maxSelections&&this.selectedOptions.length===this.formItem.config.maxSelections?this.disableOptions=!0:this.disableOptions=!1}_updateValidity(){this.formItem.config.required?this.isValid=this.selectedOptions.length>0:this.isValid=!0,this.form.$setValidity("minSelections",this.isValid)}_enableWatchers(){this.Scope.$watch("CheckboxesView.formItem.config.required",(t=>{void 0!==t&&(this._updateView(),this._updateValidity())}))}}u.$inject=["$scope","Utils"];class p{constructor(t){this.$timeout=t,this.restrict="E",this.template='<md-input-container>\n  <div\n    layout="{{CheckboxesView.formItem.config.direction == \'horizontal\' ? \'row\' : \'column\'}}"\n  >\n    <md-checkbox\n      ng-repeat="option in CheckboxesView.formItem.options track by $index"\n      ng-model="option.selected"\n      ng-change="CheckboxesView.toggleSelectedOption(option)"\n      ng-disabled="CheckboxesView.disableOptions && !option.selected"\n      aria-label="..."\n      >{{option.value}}</md-checkbox\n    >\n  </div>\n\n  <div ng-messages="CheckboxesView.form.$error">\n    <div ng-message="minSelections">\n      Must select {{CheckboxesView.formItem.maxSelections || 1}} items\n    </div>\n  </div>\n</md-input-container>\n',this.scope={formItem:"=",isPreview:"&",form:"="},this.controller=u,this.controllerAs="CheckboxesView",this.bindToController=!0}link(t,e,n,i){this.$timeout((function(){i.init()}),50)}}p.$inject=["$timeout"];class h{constructor(t,e){this.Attrs=t,this.Utils=e,this.templates={upload:'<upload-item item="FormItem.item"></upload-item>',agreement:'<agreement-item item="FormItem.item"></agreement-item>',input:'<input-item item="FormItem.item"></input-item>',chooseFromList:'<bet-form-choose-from-list item="FormItem.item"></bet-form-choose-from-list>',label:'<label-item item="FormItem.item"></label-item>',multipleChoices:'<radio-button-item item="FormItem.item"></radio-button-item>',matrix:'<matrix-item item="FormItem.item"></matrix-item>',checkboxes:'<checkboxes-item item="FormItem.item"></checkboxes-item>',textarea:'<textarea-item item="FormItem.item"></textarea-item>'},this.item={}}init(){this.item=this.Utils.extend(this.item||{},{type:this.Attrs.type,props:{title:"",helpText:""},config:{required:!1}})}deleteClicked(){this.onDelete({item:this.item,index:this.index()})}_getItemTemplate(t){return'<div class="form-item-container"><div class="form-item-actions"><md-button class="md-button" ng-if="FormItem.Attrs.onDelete" ng-click="FormItem.deleteClicked()"> <md-icon class="material-icons small">delete</md-icon></md-button><md-button class="md-button" ng-if="FormItem.Attrs.onUp" ng-click="FormItem.onUp({item: FormItem.item, index: FormItem.index()})"> <md-icon class="material-icons small">arrow_drop_up</md-icon></md-button><md-button class="md-button" ng-if="FormItem.Attrs.onDown" ng-click="FormItem.onDown({item: FormItem.item, index: FormItem.index()})"> <md-icon class="material-icons small">arrow_drop_down</md-icon></md-button></div><md-input-container><label>Field Title</label><input ng-model="FormItem.item.props.title"/></md-input-container><md-input-container><label>Help Text</label><input ng-model="FormItem.item.props.helpText" /></md-input-container>'+this.templates[t]+'<md-input-container><md-checkbox ng-model="FormItem.item.config.required">Required field</md-checkbox></md-input-container></div>'}}h.$inject=["$attrs","Utils"];class f{constructor(t){this.$compile=t,this.restrict="E",this.scope={item:"=",onDelete:"&",onUp:"&",onDown:"&",index:"&"},this.controller=h,this.controllerAs="FormItem",this.bindToController=!0,this.template='<div class="form-item-container md-inline-form">\n  <div class="form-item-actions">\n    <md-button\n      class="md-button"\n      ng-if="FormItem.Attrs.onDelete"\n      ng-click="FormItem.deleteClicked()"\n    >\n      <md-icon class="material-icons small">delete</md-icon>\n    </md-button>\n    <md-button\n      class="md-button"\n      ng-if="FormItem.Attrs.onUp"\n      ng-click="FormItem.onUp({item: FormItem.item, index: FormItem.index()})"\n    >\n      <md-icon class="material-icons small">arrow_drop_up</md-icon>\n    </md-button>\n    <md-button\n      class="md-button"\n      ng-if="FormItem.Attrs.onDown"\n      ng-click="FormItem.onDown({item: FormItem.item, index: FormItem.index()})"\n    >\n      <md-icon class="material-icons small">arrow_drop_down</md-icon>\n    </md-button>\n  </div>\n\n  <md-input-container ng-if="FormItem.item.type != \'label\'" class="md-block">\n    <label>Field Title</label>\n    <input ng-model="FormItem.item.props.title" />\n  </md-input-container>\n\n  <md-input-container ng-if="FormItem.item.type != \'label\'" class="md-block">\n    <label>Help Text</label>\n    <input ng-model="FormItem.item.props.helpText" />\n  </md-input-container>\n\n  <md-input-container\n    ng-if="FormItem.item.type === \'agreement\'"\n    class="md-block"\n  >\n    <label>Option Text</label>\n    <input ng-model="FormItem.item.options[0].value" />\n  </md-input-container>\n\n  <div ng-switch="FormItem.item.type">\n    <upload-item ng-switch-when="upload" item="FormItem.item"></upload-item>\n    <agreement-item\n      ng-switch-when="agreement"\n      item="FormItem.item"\n    ></agreement-item>\n    <label-item ng-switch-when="label" item="FormItem.item"></label-item>\n    <input-item ng-switch-when="input" item="FormItem.item"></input-item>\n    <radio-button-item\n      ng-switch-when="multipleChoices"\n      item="FormItem.item"\n    ></radio-button-item>\n    <matrix-item ng-switch-when="matrix" item="FormItem.item"></matrix-item>\n    <checkboxes-item\n      ng-switch-when="checkboxes"\n      item="FormItem.item"\n    ></checkboxes-item>\n    <textarea-item\n      ng-switch-when="textarea"\n      item="FormItem.item"\n    ></textarea-item>\n    <select-item\n      ng-switch-when="chooseFromList"\n      item="FormItem.item"\n    ></select-item>\n    <p ng-switch-default>UNKNOWN TYPE</p>\n  </div>\n\n  <md-input-container\n    ng-if="FormItem.item.type != \'label\' && FormItem.item.type != \'upload\'"\n    class="md-block"\n  >\n    <md-checkbox ng-model="FormItem.item.config.required"\n      >Required field</md-checkbox\n    >\n  </md-input-container>\n</div>\n'}link(t,e,n,i){const o=i._getItemTemplate(n.type),s=this.$compile(o)(t);return i.init(),s}}f.$inject=["$compile"];class g{constructor(){this.form={items:[]}}delete(t,e){this.form.items.splice(e,1)}up(t,e){if(0!==e){const n=this.form.items[e-1];this.form.items[e]=n,this.form.items[e-1]=t}}down(t,e){if(e!==this.form.items.length-1){const n=this.form.items[e+1];this.form.items[e]=n,this.form.items[e+1]=t}}}g.$inject=[];class b{constructor(){this.restrict="E",this.scope={form:"="},this.template='<div>\n  <form-item\n    ng-repeat="item in container.form.items track by $index"\n    type="{{item.type}}"\n    item="item"\n    index="$index"\n    on-delete="container.delete(item, index)"\n    on-up="container.up(item, index)"\n    on-down="container.down(item, index)"\n  >\n  </form-item>\n</div>\n',this.controller=g,this.controllerAs="container",this.bindToController=!0}}b.$inject=[];class w{constructor(t){this.Scope=t}init(){}}w.$inject=["$scope"];class v{constructor(){this.restrict="E",this.template='<div class="md-inline-form">\n  <div\n    class="formItem"\n    ng-repeat="formItem in FormView.form.items track by $index"\n    ng-switch="formItem.type"\n    layout="column"\n  >\n    <ng-form name="formItemForm">\n      <div>\n        <div class="formItem-title">{{formItem.props.title}}</div>\n        <div class="formItem-help-text">{{formItem.props.helpText}}</div>\n\n        <upload-view\n          form-item="formItem"\n          is-preview="true"\n          form="formItemForm"\n          ng-switch-when="upload"\n        ></upload-view>\n        <agreement-view\n          form-item="formItem"\n          is-preview="true"\n          form="formItemForm"\n          ng-switch-when="agreement"\n        ></agreement-view>\n        <checkboxes-view\n          form-item="formItem"\n          is-preview="true"\n          form="formItemForm"\n          ng-switch-when="checkboxes"\n        ></checkboxes-view>\n        <radio-button-view\n          form-item="formItem"\n          is-preview="true"\n          form="formItemForm"\n          ng-switch-when="multipleChoices"\n        ></radio-button-view>\n        <input-view\n          form-item="formItem"\n          form="formItemForm"\n          ng-switch-when="input"\n        ></input-view>\n        <textarea-view\n          form-item="formItem"\n          form="formItemForm"\n          ng-switch-when="textarea"\n        ></textarea-view>\n        <matrix-view\n          form-item="formItem"\n          is-preview="true"\n          form="formItemForm"\n          ng-switch-when="matrix"\n        ></matrix-view>\n        <select-view\n          form-item="formItem"\n          is-preview="true"\n          form="formItemForm"\n          ng-switch-when="chooseFromList"\n        ></select-view>\n        <label-view\n          form-item="formItem"\n          is-preview="true"\n          form="formItemForm"\n          ng-switch-when="label"\n        ></label-view>\n      </div>\n    </ng-form>\n  </div>\n</div>\n',this.scope={form:"="},this.controller=w,this.controllerAs="FormView",this.bindToController=!0}link(t,e,n,i){i.init()}}v.$inject=[];class x{constructor(t,e){this.Element=e,this.item=t.extend(this.item||{},{config:{type:"text"}})}}x.$inject=["Utils","$element"];class I{constructor(){this.restrict="E",this.template='<md-input-container class="md-block">\n  <label>Placeholder</label>\n  <input type="text" ng-model="Input.item.config.placeholder" />\n</md-input-container>\n<md-input-container class="md-block">\n  <label>Type</label>\n  <md-select ng-model="Input.item.config.type">\n    <md-option value="text">Text</md-option>\n    <md-option value="number">Number</md-option>\n    <md-option value="email">Email</md-option>\n  </md-select>\n</md-input-container>\n',this.scope={item:"="},this.controller=x,this.controllerAs="Input",this.bindToController=!0}}I.$inject=[];class ${constructor(t){this.Utils=t,this.formItem={}}init(){this.Utils.extend(this.formItem,{config:{}})}}$.$inject=["Utils"];class y{constructor(t){this.$timeout=t,this.restrict="E",this.template='<md-input-container class="md-block">\n  <input\n    ng-model="InputView.formItem.value"\n    type="{{InputView.formItem.config.type}}"\n    placeholder="{{InputView.formItem.config.placeholder}}"\n    ng-required="InputView.formItem.config.required"\n  />\n  <div ng-messages="InputView.form.$error">\n    <div ng-message="required">This field is required</div>\n  </div>\n</md-input-container>\n',this.scope={formItem:"=",form:"="},this.controller=$,this.controllerAs="InputView",this.bindToController=!0}link(t,e,n,i){this.$timeout((function(){i.init()}),50)}}y.$inject=["$timeout"];class k{constructor(t){this.Element=t}}k.$inject=["$element"];class V{constructor(t){this.Utils=t}init(){this.Utils.extend(this.formItem,{})}}V.$inject=["Utils"];class F{constructor(t){this.$timeout=t,this.restrict="E",this.template='<md-input-container class="md-block">\n  <md-content flex layout-padding layout="row" layout-align="center center">\n    <pre>\n      <span class="formItem-content">{{LabelView.formItem.value}}</span>\n    </pre>\n  </md-content>\n</md-input-container>\n',this.scope={formItem:"=",form:"="},this.controller=V,this.controllerAs="LabelView",this.bindToController=!0}link(t,e,n,i){this.$timeout((function(){i.init()}),50)}}F.$inject=["$timeout"];class U{constructor(t,e){this.RowContainer=angular.element(e[0].querySelector(".rowContainer")),this.ColumnContainer=angular.element(e[0].querySelector(".columnContainer")),this.item=t.extend(this.item||{},{config:{rows:[{value:""}],columns:[{value:""}]}})}deleteRow(t){this.item.config.rows.splice(t,1)}addRow(){this.item.config.rows.push({value:""}),setTimeout(function(){const t=this.RowContainer.find("input");t[t.length-1].focus()}.bind(this),0)}deleteColumn(t){this.item.config.columns.splice(t,1)}addColumn(){this.item.config.columns.push({value:""}),setTimeout((()=>{const t=this.ColumnContainer.find("input");t[t.length-1].focus()}),0)}}U.$inject=["Utils","$document"];class C{constructor(){this.restrict="E",this.template='<div\n  class="sortable-container columnContainer"\n  layout="column"\n  sv-root\n  sv-part="Matrix.item.config.columns"\n>\n  <div\n    class="option-item"\n    layout="row"\n    ng-repeat="column in Matrix.item.config.columns track by $index"\n    sv-element\n  >\n    <md-button\n      class="md-button handle"\n      md-no-ink\n      aria-label="reorder option item"\n      sv-handle\n    >\n      <md-icon class="material-icons">reorder</md-icon>\n    </md-button>\n\n    <md-input-container class="input-container">\n      <label>Column {{$index + 1}}</label>\n      <input ng-model="column.value" />\n    </md-input-container>\n\n    <md-button\n      class="md-button"\n      md-no-ink\n      aria-label="delete column item"\n      ng-click="Matrix.deleteColumn($index)"\n    >\n      <md-icon class="material-icons">delete</md-icon>\n      <md-tooltip md-autohide="true">Delete</md-tooltip>\n    </md-button>\n  </div>\n  <div layout="row" layout-align="start">\n    <md-button\n      class="md-primary add-option-button"\n      md-no-ink\n      aria-label="add option item"\n      ng-click="Matrix.addColumn()"\n      >Add Column</md-button\n    >\n  </div>\n</div>\n\n<div\n  class="sortable-container rowContainer"\n  layout="column"\n  sv-root\n  sv-part="Matrix.item.config.rows"\n>\n  <div\n    class="option-item"\n    layout="row"\n    ng-repeat="row in Matrix.item.config.rows track by $index"\n    sv-element\n  >\n    <md-button\n      class="md-button handle"\n      md-no-ink\n      aria-label="reorder row item"\n      sv-handle\n    >\n      <md-icon class="material-icons">reorder</md-icon>\n    </md-button>\n\n    <md-input-container class="input-container">\n      <label>Row {{$index + 1}}</label>\n      <input ng-model="row.value" />\n    </md-input-container>\n\n    <md-button\n      class="md-button"\n      md-no-ink\n      aria-label="delete row item"\n      ng-click="Matrix.deleteRow($index)"\n    >\n      <md-icon class="material-icons">delete</md-icon>\n      <md-tooltip md-autohide="true">Delete</md-tooltip>\n    </md-button>\n  </div>\n  <div layout="row" layout-align="start">\n    <md-button\n      class="md-primary add-option-button"\n      md-no-ink\n      aria-label="add row item"\n      ng-click="Matrix.addRow()"\n      >Add row</md-button\n    >\n  </div>\n</div>\n',this.scope={item:"="},this.controller=U,this.controllerAs="Matrix",this.bindToController=!0}}C.$inject=[];class S{constructor(t,e){this.Scope=t,this.Utils=e,this.isValid=!0,this.formItem={}}init(){this.formItem=this.Utils.extend(this.formItem,{config:{rows:[],columns:[]}}),this._updateValidity(),this.isPreview()&&this._enableWatchers()}_updateValidity(){let t=!0;this.formItem.config.required&&(t=!this.formItem.config.rows.some((t=>void 0===t.selected))),this.isValid=t,this.form.$setValidity("required",this.isValid)}_enableWatchers(){this.Scope.$watchGroup(["MatrixView.formItem.config.required","MatrixView.formItem.config.rows.length"],(t=>{void 0!==t&&this._updateValidity()}))}}S.$inject=["$scope","Utils"];class T{constructor(t){this.$timeout=t,this.restrict="E",this.template='<md-input-container class="matrix-container md-block" layout="column">\n  <div class="matrix">\n    <div class="matrix-row" flex layout="row">\n      <span class="matrix-cell" flex="20"></span>\n      <span\n        class="matrix-cell matrix-cell-header"\n        flex\n        ng-repeat="column in MatrixView.formItem.config.columns track by $index"\n        >{{column.value}}</span\n      >\n    </div>\n    <div\n      class="matrix-row"\n      ng-repeat="row in MatrixView.formItem.config.rows track by $index"\n      layout="row"\n    >\n      <span class="matrix-cell" flex="20" layout="column" layout-align="center"\n        >{{row.value}}</span\n      >\n      <md-radio-group\n        ng-model="row.selected"\n        ng-change="MatrixView._updateValidity()"\n        flex\n        layout="row"\n      >\n        <span\n          class="matrix-cell radio-button-cell"\n          flex\n          ng-repeat="column in MatrixView.formItem.config.columns track by $index"\n        >\n          <md-radio-button\n            value="{{column.value}}"\n            aria-label="..."\n          ></md-radio-button>\n        </span>\n      </md-radio-group>\n    </div>\n  </div>\n\n  <div ng-messages="MatrixView.form.$error">\n    <div ng-message="required">This is required</div>\n  </div>\n</md-input-container>\n',this.scope={formItem:"=",isPreview:"&",form:"="},this.controller=S,this.controllerAs="MatrixView",this.bindToController=!0}link(t,e,n,i){this.$timeout((function(){i.init()}),50)}}T.$inject=["$timeout"];class A{constructor(t,e){this.Element=e,this.item=t.extend(this.item||{},{config:{},options:[{value:""}]})}deleteOption(t){this.item.options.splice(t,1)}addOption(){this.item.options.push({value:""}),setTimeout((()=>{const t=this.Element.find("input");t[t.length-1].focus()}),0)}}A.$inject=["Utils","$element"];class _{constructor(){this.restrict="E",this.template='<div\n  class="sortable-container"\n  layout="column"\n  sv-root\n  sv-part="RadioButton.item.options"\n>\n  <md-switch\n    ng-model="RadioButton.item.config.direction"\n    ng-true-value="\'horizontal\'"\n    ng-false-value="\'vertical\'"\n  >\n    Layout direction ({{RadioButton.item.config.direction == \'horizontal\' ?\n    \'Horizontal\' : \'Vertical\'}})\n  </md-switch>\n\n  <div\n    class="option-item"\n    layout="row"\n    ng-repeat="option in RadioButton.item.options track by $index"\n    sv-element\n  >\n    <md-button\n      class="md-button handle"\n      md-no-ink\n      aria-label="reorder option item"\n      sv-handle\n    >\n      <md-icon class="material-icons">reorder</md-icon>\n    </md-button>\n\n    <md-input-container class="md-block">\n      <label>Option {{$index + 1}}</label>\n      <input ng-model="option.value" />\n    </md-input-container>\n\n    <md-button\n      class="md-button md-warn"\n      ng-click="RadioButton.deleteOption($index)"\n    >\n      <md-icon class="material-icons">delete</md-icon>\n    </md-button>\n  </div>\n\n  <md-button class="md-raised md-accent" ng-click="RadioButton.addOption()"\n    >Add Option</md-button\n  >\n</div>\n',this.scope={item:"="},this.controller=A,this.controllerAs="RadioButton",this.bindToController=!0}}_.$inject=[];class O{constructor(t){this.Utils=t,this.formItem={}}init(){this.formItem=this.Utils.extend(this.formItem,{config:{},options:[]})}}O.$inject=["Utils"];class j{constructor(t){this.$timeout=t,this.restrict="E",this.template='<md-input-container class="md-block">\n  <md-radio-group\n    name="formItemInput"\n    ng-required="RadioButtonView.formItem.config.required"\n    ng-model="RadioButtonView.formItem.value"\n    layout="{{RadioButtonView.formItem.config.direction == \'horizontal\' ? \'row\' : \'column\'}}"\n    required\n  >\n    <md-radio-button\n      ng-repeat="option in RadioButtonView.formItem.options track by $index"\n      value="{{option.value}}"\n      aria-label="..."\n    >\n      {{option.value}}\n    </md-radio-button>\n  </md-radio-group>\n\n  <div ng-messages="RadioButtonView.form.$error">\n    <div ng-message="required">This field is required</div>\n  </div>\n</md-input-container>\n',this.scope={formItem:"=",isPreview:"&",form:"="},this.controller=O,this.controllerAs="RadioButtonView",this.bindToController=!0}link(t,e,n,i){this.$timeout((function(){i.init()}),50)}}j.$inject=["$timeout"];class E{constructor(t){this.Utils=t,this.formItem={}}init(){this.formItem=this.Utils.extend(this.formItem,{config:{},options:[]})}}E.$inject=["Utils"];class q{constructor(t){this.$timeout=t,this.restrict="E",this.template='<md-input-container class="md-block">\n  <md-select\n    name="formItemInput"\n    ng-required="SelectView.formItem.config.required"\n    ng-model="SelectView.formItem.value"\n  >\n    <md-option\n      ng-repeat="option in SelectView.formItem.options track by $index"\n      ng-value="option.value"\n      >{{ option.value }}</md-option\n    >\n  </md-select>\n  <div ng-messages="SelectView.form.$error">\n    <div ng-message="required">This field is required</div>\n  </div>\n</md-input-container>\n',this.scope={formItem:"=",isPreview:"&",form:"="},this.controller=E,this.controllerAs="SelectView",this.bindToController=!0}link(t,e,n,i){this.$timeout((function(){i.init()}),50)}}q.$inject=["$timeout"];class M{constructor(t,e){this.Element=e,this.item=t.extend(this.item||{},{config:{},options:[{value:""}]})}deleteOption(t){this.item.options.splice(t,1)}addOption(){this.item.options.push({value:""}),setTimeout((()=>{const t=this.Element.find("input");t[t.length-1].focus()}),0)}}M.$inject=["Utils","$element"];class z{constructor(){this.restrict="E",this.template='<div\n  class="sortable-container"\n  layout="column"\n  sv-root\n  sv-part="Select.item.options"\n>\n  <div\n    class="option-item"\n    layout="row"\n    ng-repeat="option in Select.item.options track by $index"\n    sv-element\n  >\n    <md-button\n      class="md-button handle"\n      md-no-ink\n      aria-label="reorder option item"\n      sv-handle\n    >\n      <md-icon class="material-icons">reorder</md-icon>\n    </md-button>\n\n    <md-input-container class="md-block">\n      <label>Option {{$index + 1}}</label>\n      <input ng-model="option.value" />\n    </md-input-container>\n\n    <md-button class="md-button md-warn" ng-click="Select.deleteOption($index)">\n      <md-icon class="material-icons">delete</md-icon>\n    </md-button>\n  </div>\n\n  <md-button class="md-raised md-accent" ng-click="Select.addOption()"\n    >Add Option</md-button\n  >\n</div>\n',this.scope={item:"="},this.controller=M,this.controllerAs="Select",this.bindToController=!0}}z.$inject=[];class R{constructor(t,e){this.Element=e,this.item=t.extend(this.item||{},{config:{}})}}R.$inject=["Utils","$element"];class B{constructor(){this.restrict="E",this.template='<md-input-container class="md-block">\n  <label>Placeholder</label>\n  <input type="text" ng-model="Textarea.item.config.placeholder" />\n</md-input-container>\n',this.scope={item:"="},this.controller=R,this.controllerAs="Textarea",this.bindToController=!0}}B.$inject=[];class P{constructor(t){this.Utils=t,this.formItem={}}init(){this.formItem=this.Utils.extend(this.formItem,{config:{}})}}P.$inject=["Utils"];class D{constructor(t){this.$timeout=t,this.scope={formItem:"=",form:"="},this.restrict="E",this.template='<md-input-container class="md-block">\n  <textarea\n    ng-model="TextareaView.formItem.value"\n    placeholder="{{TextareaView.formItem.config.placeholder}}"\n    ng-required="TextareaView.formItem.config.required"\n  ></textarea>\n  <div ng-messages="TextareaView.form.$error">\n    <div ng-message="required">This field is required</div>\n  </div>\n</md-input-container>\n',this.controller=P,this.controllerAs="TextareaView",this.bindToController=!0}link(t,e,n,i){this.$timeout((function(){i.init()}),50)}}D.$inject=["$timeout"];const L=angular.module("angularMaterialFormBuilder",["ngMaterial","angular-sortable-view","ngMessages"]).service("Utils",class{extend(t,e){return Object.keys(e).reduce(((t,n)=>(void 0===t[n]?t[n]=e[n]:"object"==typeof e[n]&&(t[n]=this.extend(t[n],e[n])),t)),void 0===t?{}:t)}}).controller("MainController",a).directive("uploadItem",(function(){return{restrict:"E",template:'<div\n  class="sortable-container"\n  layout="column"\n  sv-root\n  sv-part="Upload.item.options"\n>\n  <md-switch\n    ng-model="Upload.item.config.multipleUpload"\n    ng-true-value="true"\n    ng-false-value="false"\n  >\n    Multiple\n  </md-switch>\n\n  <md-input-container class="md-block">\n    <span>File size: {{Upload.item.config.size}} Mb</span>\n    <input\n      type="number"\n      id="size"\n      name="size"\n      min="1"\n      max="10"\n      step="0.5"\n      aria-label="size"\n      ng-model="Upload.item.config.size"\n    />\n  </md-input-container>\n\n  <md-input-container class="md-block">\n    <label>Size error message</label>\n    <textarea\n      ng-model="Upload.item.config.sizeErrMessage"\n      md-maxlength="150"\n      rows="2"\n    ></textarea>\n  </md-input-container>\n\n  <md-switch\n    ng-model="Upload.item.config.showAccept"\n    ng-true-value="true"\n    ng-false-value="false"\n  >\n    Show Types allowed\n  </md-switch>\n\n  <md-input-container class="md-block" ng-if="Upload.item.config.showAccept">\n    <label>Types allowed</label>\n    <textarea\n      ng-model="Upload.item.config.accept"\n      md-maxlength="150"\n      rows="2"\n    ></textarea>\n  </md-input-container>\n</div>\n',scope:{item:"="},controller:i,controllerAs:"Upload",bindToController:!0}})).directive("uploadView",s).directive("agreementItem",r).directive("agreementView",c).directive("checkboxesItem",(function(){return{restrict:"E",template:'<div\n  class="sortable-container"\n  layout="column"\n  sv-root\n  sv-part="Checkboxes.item.options"\n>\n  <md-input-container class="md-block">\n    <label>Max Selections</label>\n    <input type="number" ng-model="Checkboxes.item.config.maxSelections" />\n  </md-input-container>\n\n  <md-switch\n    ng-model="Checkboxes.item.config.direction"\n    ng-true-value="\'horizontal\'"\n    ng-false-value="\'vertical\'"\n  >\n    Layout direction ({{Checkboxes.item.config.direction == \'horizontal\' ?\n    \'Horizontal\' : \'Vertical\'}})\n  </md-switch>\n\n  <div\n    class="option-item"\n    layout="row"\n    ng-repeat="option in Checkboxes.item.options track by $index"\n    sv-element\n  >\n    <md-button\n      class="md-button handle"\n      md-no-ink\n      aria-label="reorder option item"\n      sv-handle\n    >\n      <md-icon class="material-icons">reorder</md-icon>\n    </md-button>\n\n    <md-input-container class="md-block">\n      <label>Option {{$index + 1}}</label>\n      <input ng-model="option.value" />\n    </md-input-container>\n\n    <md-button class="md-button" ng-click="Checkboxes.deleteOption($index)">\n      <md-icon class="material-icons">delete</md-icon>\n    </md-button>\n  </div>\n  <div layout="row" layout-align="start">\n    <md-button\n      class="md-primary add-option-button"\n      ng-click="Checkboxes.addOption()"\n    >\n      <md-icon class="material-icons">add</md-icon>\n    </md-button>\n  </div>\n</div>\n',scope:{item:"="},controller:d,controllerAs:"Checkboxes",bindToController:!0}})).directive("checkboxesView",p).directive("formItem",f).directive("formItemsContainer",b).directive("formView",v).directive("inputItem",I).directive("inputView",y).directive("labelItem",class{constructor(){this.restrict="E",this.template='<md-input-container class="md-block">\n  <label>Text</label>\n  <textarea ng-model="Label.item.value" md-maxlength="150" rows="5"></textarea>\n</md-input-container>\n',this.scope={item:"="},this.controller=k,this.controllerAs="Label",this.bindToController=!0}}).directive("labelView",F).directive("matrixItem",C).directive("matrixView",T).directive("radioButtonItem",_).directive("radioButtonView",j).directive("selectItem",z).directive("selectView",q).directive("textareaItem",B).directive("textareaView",D)}},e={};function n(i){if(e[i])return e[i].exports;var o=e[i]={exports:{}};return t[i](o,o.exports,n),o.exports}return n.d=(t,e)=>{for(var i in e)n.o(e,i)&&!n.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n(999)})()}));
//# sourceMappingURL=angular-material-form-builder.min.js.map